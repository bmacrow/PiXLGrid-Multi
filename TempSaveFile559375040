#tag Window
Begin Window Window1
   BackColor       =   &c49494A00
   Backdrop        =   0
   CloseButton     =   True
   Compatibility   =   ""
   Composite       =   False
   Frame           =   0
   FullScreen      =   False
   FullScreenButton=   False
   HasBackColor    =   True
   Height          =   700
   ImplicitInstance=   True
   LiveResize      =   True
   MacProcID       =   0
   MaxHeight       =   32000
   MaximizeButton  =   False
   MaxWidth        =   32000
   MenuBar         =   905261055
   MenuBarVisible  =   True
   MinHeight       =   700
   MinimizeButton  =   True
   MinWidth        =   1010
   Placement       =   0
   Resizeable      =   True
   Title           =   "Editor"
   Visible         =   True
   Width           =   1010
   Begin Canvas Canvas1
      AcceptFocus     =   False
      AcceptTabs      =   False
      AutoDeactivate  =   True
      Backdrop        =   0
      DoubleBuffer    =   False
      Enabled         =   True
      EraseBackground =   True
      Height          =   392
      HelpTag         =   ""
      Index           =   -2147483648
      InitialParent   =   ""
      Left            =   20
      LockBottom      =   True
      LockedInPosition=   False
      LockLeft        =   True
      LockRight       =   True
      LockTop         =   True
      Scope           =   0
      TabIndex        =   1
      TabPanelIndex   =   0
      TabStop         =   False
      Top             =   20
      Transparent     =   True
      UseFocusRing    =   True
      Visible         =   True
      Width           =   960
   End
   Begin ScrollBar VerticalScrollBar
      AcceptFocus     =   True
      AutoDeactivate  =   True
      Enabled         =   True
      Height          =   392
      HelpTag         =   ""
      Index           =   -2147483648
      InitialParent   =   ""
      Left            =   980
      LineStep        =   1
      LiveScroll      =   True
      LockBottom      =   True
      LockedInPosition=   False
      LockLeft        =   False
      LockRight       =   True
      LockTop         =   True
      Maximum         =   100
      Minimum         =   0
      PageStep        =   20
      Scope           =   0
      TabIndex        =   20
      TabPanelIndex   =   0
      TabStop         =   True
      Top             =   20
      Transparent     =   False
      Value           =   0
      Visible         =   True
      Width           =   15
   End
   Begin ScrollBar HorizontalScrollBar
      AcceptFocus     =   True
      AutoDeactivate  =   True
      Enabled         =   True
      Height          =   15
      HelpTag         =   ""
      Index           =   -2147483648
      InitialParent   =   ""
      Left            =   20
      LineStep        =   1
      LiveScroll      =   True
      LockBottom      =   True
      LockedInPosition=   False
      LockLeft        =   True
      LockRight       =   True
      LockTop         =   False
      Maximum         =   100
      Minimum         =   0
      PageStep        =   20
      Scope           =   0
      TabIndex        =   3
      TabPanelIndex   =   0
      TabStop         =   True
      Top             =   412
      Transparent     =   False
      Value           =   0
      Visible         =   True
      Width           =   960
   End
   Begin UpDownArrows Scale
      AcceptFocus     =   False
      AutoDeactivate  =   True
      Enabled         =   True
      Height          =   22
      HelpTag         =   "Zoom in and out"
      Index           =   -2147483648
      InitialParent   =   ""
      Left            =   890
      LockBottom      =   True
      LockedInPosition=   False
      LockLeft        =   False
      LockRight       =   True
      LockTop         =   False
      Scope           =   0
      TabIndex        =   12
      TabPanelIndex   =   0
      TabStop         =   True
      Top             =   440
      Transparent     =   False
      Visible         =   True
      Width           =   14
   End
   Begin TextField OutH
      AcceptTabs      =   False
      Alignment       =   0
      AutoDeactivate  =   True
      AutomaticallyCheckSpelling=   False
      BackColor       =   &cFFFFFF00
      Bold            =   False
      Border          =   True
      CueText         =   ""
      DataField       =   ""
      DataSource      =   ""
      Enabled         =   True
      Format          =   ""
      Height          =   22
      HelpTag         =   ""
      Index           =   -2147483648
      Italic          =   False
      Left            =   74
      LimitText       =   0
      LockBottom      =   True
      LockedInPosition=   False
      LockLeft        =   True
      LockRight       =   False
      LockTop         =   False
      Mask            =   ""
      Password        =   False
      ReadOnly        =   False
      Scope           =   0
      TabIndex        =   6
      TabPanelIndex   =   0
      TabStop         =   True
      Text            =   "1920"
      TextColor       =   &c00000000
      TextFont        =   "System"
      TextSize        =   0.0
      TextUnit        =   0
      Top             =   444
      Transparent     =   False
      Underline       =   False
      UseFocusRing    =   True
      Visible         =   True
      Width           =   46
   End
   Begin TextField OutV
      AcceptTabs      =   False
      Alignment       =   0
      AutoDeactivate  =   True
      AutomaticallyCheckSpelling=   False
      BackColor       =   &cFFFFFF00
      Bold            =   False
      Border          =   True
      CueText         =   ""
      DataField       =   ""
      DataSource      =   ""
      Enabled         =   True
      Format          =   ""
      Height          =   22
      HelpTag         =   ""
      Index           =   -2147483648
      Italic          =   False
      Left            =   135
      LimitText       =   0
      LockBottom      =   True
      LockedInPosition=   False
      LockLeft        =   True
      LockRight       =   False
      LockTop         =   False
      Mask            =   ""
      Password        =   False
      ReadOnly        =   False
      Scope           =   0
      TabIndex        =   7
      TabPanelIndex   =   0
      TabStop         =   True
      Text            =   "1080"
      TextColor       =   &c00000000
      TextFont        =   "System"
      TextSize        =   0.0
      TextUnit        =   0
      Top             =   444
      Transparent     =   False
      Underline       =   False
      UseFocusRing    =   True
      Visible         =   True
      Width           =   46
   End
   Begin Label totYlabel1
      AutoDeactivate  =   True
      Bold            =   False
      DataField       =   ""
      DataSource      =   ""
      Enabled         =   True
      Height          =   22
      HelpTag         =   ""
      Index           =   -2147483648
      InitialParent   =   ""
      Italic          =   False
      Left            =   122
      LockBottom      =   True
      LockedInPosition=   False
      LockLeft        =   True
      LockRight       =   False
      LockTop         =   False
      Multiline       =   False
      Scope           =   0
      Selectable      =   False
      TabIndex        =   10
      TabPanelIndex   =   0
      TabStop         =   False
      Text            =   "H"
      TextAlign       =   0
      TextColor       =   &c00000000
      TextFont        =   "System"
      TextSize        =   0.0
      TextUnit        =   0
      Top             =   444
      Transparent     =   True
      Underline       =   False
      Visible         =   True
      Width           =   12
   End
   Begin Label totYlabel2
      AutoDeactivate  =   True
      Bold            =   False
      DataField       =   ""
      DataSource      =   ""
      Enabled         =   True
      Height          =   22
      HelpTag         =   ""
      Index           =   -2147483648
      InitialParent   =   ""
      Italic          =   False
      Left            =   186
      LockBottom      =   True
      LockedInPosition=   False
      LockLeft        =   True
      LockRight       =   False
      LockTop         =   False
      Multiline       =   False
      Scope           =   0
      Selectable      =   False
      TabIndex        =   11
      TabPanelIndex   =   0
      TabStop         =   False
      Text            =   "V"
      TextAlign       =   0
      TextColor       =   &c00000000
      TextFont        =   "System"
      TextSize        =   0.0
      TextUnit        =   0
      Top             =   444
      Transparent     =   True
      Underline       =   False
      Visible         =   True
      Width           =   14
   End
   Begin Label Label10
      AutoDeactivate  =   True
      Bold            =   False
      DataField       =   ""
      DataSource      =   ""
      Enabled         =   True
      Height          =   22
      HelpTag         =   ""
      Index           =   -2147483648
      InitialParent   =   ""
      Italic          =   False
      Left            =   22
      LockBottom      =   True
      LockedInPosition=   False
      LockLeft        =   True
      LockRight       =   False
      LockTop         =   False
      Multiline       =   False
      Scope           =   0
      Selectable      =   False
      TabIndex        =   5
      TabPanelIndex   =   0
      TabStop         =   False
      Text            =   "Canvas"
      TextAlign       =   0
      TextColor       =   &c00000000
      TextFont        =   "System"
      TextSize        =   0.0
      TextUnit        =   0
      Top             =   444
      Transparent     =   True
      Underline       =   False
      Visible         =   True
      Width           =   47
   End
   Begin CheckBox stats
      AutoDeactivate  =   True
      Bold            =   False
      Caption         =   "Raster"
      DataField       =   ""
      DataSource      =   ""
      Enabled         =   True
      Height          =   22
      HelpTag         =   "Display raster box on canvas"
      Index           =   -2147483648
      InitialParent   =   ""
      Italic          =   False
      Left            =   200
      LockBottom      =   True
      LockedInPosition=   False
      LockLeft        =   True
      LockRight       =   False
      LockTop         =   False
      Scope           =   0
      State           =   1
      TabIndex        =   8
      TabPanelIndex   =   0
      TabStop         =   True
      TextFont        =   "System"
      TextSize        =   0.0
      TextUnit        =   0
      Top             =   444
      Transparent     =   False
      Underline       =   False
      Value           =   True
      Visible         =   False
      Width           =   66
   End
   Begin Label zoom
      AutoDeactivate  =   True
      Bold            =   False
      DataField       =   ""
      DataSource      =   ""
      Enabled         =   True
      Height          =   17
      HelpTag         =   ""
      Index           =   -2147483648
      InitialParent   =   ""
      Italic          =   False
      Left            =   948
      LockBottom      =   True
      LockedInPosition=   False
      LockLeft        =   False
      LockRight       =   True
      LockTop         =   False
      Multiline       =   False
      Scope           =   0
      Selectable      =   False
      TabIndex        =   19
      TabPanelIndex   =   0
      TabStop         =   False
      Text            =   "54%"
      TextAlign       =   1
      TextColor       =   &c00000000
      TextFont        =   "System"
      TextSize        =   0.0
      TextUnit        =   0
      Top             =   451
      Transparent     =   True
      Underline       =   False
      Visible         =   True
      Width           =   39
   End
   Begin CheckBox Hscroll
      AutoDeactivate  =   True
      Bold            =   False
      Caption         =   "H scroll"
      DataField       =   ""
      DataSource      =   ""
      Enabled         =   True
      Height          =   20
      HelpTag         =   "Horizontal scrolling line"
      Index           =   -2147483648
      InitialParent   =   ""
      Italic          =   False
      Left            =   435
      LockBottom      =   True
      LockedInPosition=   False
      LockLeft        =   False
      LockRight       =   True
      LockTop         =   False
      Scope           =   0
      State           =   1
      TabIndex        =   13
      TabPanelIndex   =   0
      TabStop         =   True
      TextFont        =   "System"
      TextSize        =   0.0
      TextUnit        =   0
      Top             =   653
      Transparent     =   False
      Underline       =   False
      Value           =   True
      Visible         =   False
      Width           =   67
   End
   Begin CheckBox Vscroll
      AutoDeactivate  =   True
      Bold            =   False
      Caption         =   "V scroll"
      DataField       =   ""
      DataSource      =   ""
      Enabled         =   True
      Height          =   20
      HelpTag         =   "Vertical scrolling line"
      Index           =   -2147483648
      InitialParent   =   ""
      Italic          =   False
      Left            =   508
      LockBottom      =   True
      LockedInPosition=   False
      LockLeft        =   False
      LockRight       =   True
      LockTop         =   False
      Scope           =   0
      State           =   1
      TabIndex        =   14
      TabPanelIndex   =   0
      TabStop         =   True
      TextFont        =   "System"
      TextSize        =   0.0
      TextUnit        =   0
      Top             =   653
      Transparent     =   False
      Underline       =   False
      Value           =   True
      Visible         =   False
      Width           =   69
   End
   Begin Slider SpeedSlide
      AutoDeactivate  =   True
      Enabled         =   True
      Height          =   23
      HelpTag         =   "Adjust speed of cursor"
      Index           =   -2147483648
      InitialParent   =   ""
      Left            =   696
      LineStep        =   1
      LiveScroll      =   True
      LockBottom      =   True
      LockedInPosition=   False
      LockLeft        =   False
      LockRight       =   True
      LockTop         =   False
      Maximum         =   5
      Minimum         =   1
      PageStep        =   20
      Scope           =   0
      TabIndex        =   16
      TabPanelIndex   =   0
      TabStop         =   True
      TickStyle       =   "0"
      Top             =   653
      Transparent     =   False
      Value           =   1
      Visible         =   False
      Width           =   82
   End
   Begin Label Label13
      AutoDeactivate  =   True
      Bold            =   False
      DataField       =   ""
      DataSource      =   ""
      Enabled         =   True
      Height          =   20
      HelpTag         =   ""
      Index           =   -2147483648
      InitialParent   =   ""
      Italic          =   False
      Left            =   650
      LockBottom      =   True
      LockedInPosition=   False
      LockLeft        =   False
      LockRight       =   True
      LockTop         =   False
      Multiline       =   False
      Scope           =   0
      Selectable      =   False
      TabIndex        =   15
      TabPanelIndex   =   0
      TabStop         =   True
      Text            =   "Speed"
      TextAlign       =   0
      TextColor       =   &c00000000
      TextFont        =   "System"
      TextSize        =   0.0
      TextUnit        =   0
      Top             =   653
      Transparent     =   True
      Underline       =   False
      Visible         =   False
      Width           =   41
   End
   Begin PushButton Live
      AutoDeactivate  =   True
      Bold            =   False
      ButtonStyle     =   "0"
      Cancel          =   False
      Caption         =   "Live Output"
      Default         =   False
      Enabled         =   True
      Height          =   20
      HelpTag         =   "Display canvas on second monitor with optional moving cursor"
      Index           =   -2147483648
      InitialParent   =   ""
      Italic          =   False
      Left            =   903
      LockBottom      =   True
      LockedInPosition=   False
      LockLeft        =   False
      LockRight       =   True
      LockTop         =   False
      Scope           =   0
      TabIndex        =   17
      TabPanelIndex   =   0
      TabStop         =   True
      TextFont        =   "System"
      TextSize        =   0.0
      TextUnit        =   0
      Top             =   653
      Transparent     =   False
      Underline       =   False
      Visible         =   True
      Width           =   86
   End
   Begin Slider SizeSlide
      AutoDeactivate  =   True
      Enabled         =   True
      Height          =   23
      HelpTag         =   "Adjust size of cursor"
      Index           =   -2147483648
      InitialParent   =   ""
      Left            =   816
      LineStep        =   1
      LiveScroll      =   True
      LockBottom      =   True
      LockedInPosition=   False
      LockLeft        =   False
      LockRight       =   True
      LockTop         =   False
      Maximum         =   10
      Minimum         =   1
      PageStep        =   20
      Scope           =   0
      TabIndex        =   21
      TabPanelIndex   =   0
      TabStop         =   True
      TickStyle       =   "0"
      Top             =   653
      Transparent     =   False
      Value           =   1
      Visible         =   False
      Width           =   82
   End
   Begin Label Label15
      AutoDeactivate  =   True
      Bold            =   False
      DataField       =   ""
      DataSource      =   ""
      Enabled         =   True
      Height          =   20
      HelpTag         =   ""
      Index           =   -2147483648
      InitialParent   =   ""
      Italic          =   False
      Left            =   783
      LockBottom      =   True
      LockedInPosition=   False
      LockLeft        =   False
      LockRight       =   True
      LockTop         =   False
      Multiline       =   False
      Scope           =   0
      Selectable      =   False
      TabIndex        =   22
      TabPanelIndex   =   0
      TabStop         =   False
      Text            =   "Size"
      TextAlign       =   0
      TextColor       =   &c00000000
      TextFont        =   "System"
      TextSize        =   0.0
      TextUnit        =   0
      Top             =   653
      Transparent     =   True
      Underline       =   False
      Visible         =   False
      Width           =   28
   End
   Begin CheckBox CursorColour
      AutoDeactivate  =   True
      Bold            =   False
      Caption         =   "Colour"
      DataField       =   ""
      DataSource      =   ""
      Enabled         =   True
      Height          =   20
      HelpTag         =   "Toggle live cursor colour"
      Index           =   -2147483648
      InitialParent   =   ""
      Italic          =   False
      Left            =   582
      LockBottom      =   True
      LockedInPosition=   False
      LockLeft        =   False
      LockRight       =   True
      LockTop         =   False
      Scope           =   0
      State           =   1
      TabIndex        =   23
      TabPanelIndex   =   0
      TabStop         =   True
      TextFont        =   "System"
      TextSize        =   0.0
      TextUnit        =   0
      Top             =   653
      Transparent     =   False
      Underline       =   False
      Value           =   True
      Visible         =   False
      Width           =   63
   End
   Begin PushButton AddGrid
      AutoDeactivate  =   True
      Bold            =   False
      ButtonStyle     =   "0"
      Cancel          =   False
      Caption         =   "Add Grid..."
      Default         =   False
      Enabled         =   True
      Height          =   20
      HelpTag         =   "If selected; copy grid, otherwise copy last grid"
      Index           =   -2147483648
      InitialParent   =   ""
      Italic          =   False
      Left            =   20
      LockBottom      =   True
      LockedInPosition=   False
      LockLeft        =   True
      LockRight       =   False
      LockTop         =   False
      Scope           =   0
      TabIndex        =   24
      TabPanelIndex   =   0
      TabStop         =   True
      TextFont        =   "System"
      TextSize        =   0.0
      TextUnit        =   0
      Top             =   481
      Transparent     =   False
      Underline       =   False
      Visible         =   True
      Width           =   76
   End
   Begin Listbox GridsList
      AutoDeactivate  =   True
      AutoHideScrollbars=   True
      Bold            =   False
      Border          =   True
      ColumnCount     =   16
      ColumnsResizable=   True
      ColumnWidths    =   "44,44,44,44,52,52,*,110,50,50,50,50,50,50,50,70"
      DataField       =   ""
      DataSource      =   ""
      DefaultRowHeight=   -1
      Enabled         =   True
      EnableDrag      =   False
      EnableDragReorder=   True
      GridLinesHorizontal=   0
      GridLinesVertical=   0
      HasHeading      =   True
      HeadingIndex    =   -1
      Height          =   132
      HelpTag         =   "Add multiple grids with individual offsets"
      Hierarchical    =   False
      Index           =   -2147483648
      InitialParent   =   ""
      InitialValue    =   "tileX	tileY	cols	rows	OffsetX	OffsetY	Name	Background	Grid	Raster	TileIDs	Circle	Cross	Corner	Logo	ColourBars"
      Italic          =   False
      Left            =   22
      LockBottom      =   True
      LockedInPosition=   False
      LockLeft        =   True
      LockRight       =   True
      LockTop         =   False
      RequiresSelection=   False
      Scope           =   0
      ScrollbarHorizontal=   False
      ScrollBarVertical=   True
      SelectionType   =   0
      ShowDropIndicator=   False
      TabIndex        =   0
      TabPanelIndex   =   0
      TabStop         =   False
      TextFont        =   "System"
      TextSize        =   0.0
      TextUnit        =   0
      Top             =   513
      Transparent     =   False
      Underline       =   False
      UseFocusRing    =   True
      Visible         =   True
      Width           =   969
      _ScrollOffset   =   0
      _ScrollWidth    =   -1
   End
   Begin Rectangle Rectangle2
      AutoDeactivate  =   True
      BorderWidth     =   1
      BottomRightColor=   &c00000000
      Enabled         =   True
      FillColor       =   &cFFFFFF00
      Height          =   1
      HelpTag         =   ""
      Index           =   -2147483648
      InitialParent   =   ""
      Left            =   20
      LockBottom      =   True
      LockedInPosition=   False
      LockLeft        =   True
      LockRight       =   True
      LockTop         =   False
      Scope           =   0
      TabIndex        =   4
      TabPanelIndex   =   0
      Top             =   472
      TopLeftColor    =   &c00000000
      Transparent     =   False
      Visible         =   True
      Width           =   969
   End
   Begin PushButton DeleteGrid
      AutoDeactivate  =   True
      Bold            =   False
      ButtonStyle     =   "0"
      Cancel          =   False
      Caption         =   "Delete Grid"
      Default         =   False
      Enabled         =   True
      Height          =   20
      HelpTag         =   "Remove slected grid"
      Index           =   -2147483648
      InitialParent   =   ""
      Italic          =   False
      Left            =   108
      LockBottom      =   True
      LockedInPosition=   False
      LockLeft        =   True
      LockRight       =   False
      LockTop         =   False
      Scope           =   0
      TabIndex        =   25
      TabPanelIndex   =   0
      TabStop         =   True
      TextFont        =   "System"
      TextSize        =   0.0
      TextUnit        =   0
      Top             =   481
      Transparent     =   False
      Underline       =   False
      Visible         =   True
      Width           =   88
   End
   BeginSegmented SegmentedControl GridCanvas_select
      Enabled         =   True
      Height          =   22
      Index           =   -2147483648
      InitialParent   =   ""
      Left            =   777
      LockBottom      =   True
      LockedInPosition=   False
      LockLeft        =   False
      LockRight       =   True
      LockTop         =   False
      MacControlStyle =   0
      Scope           =   0
      Segments        =   "Grid\n\nTrue\rCanvas\n\nFalse"
      SelectionType   =   0
      TabIndex        =   26
      TabPanelIndex   =   0
      Top             =   440
      Transparent     =   False
      Visible         =   True
      Width           =   104
   End
   Begin CheckBox originCursor
      AutoDeactivate  =   True
      Bold            =   False
      Caption         =   "Offset"
      DataField       =   ""
      DataSource      =   ""
      Enabled         =   True
      Height          =   22
      HelpTag         =   "Display Top Left start point cursor and co-ordinates"
      Index           =   -2147483648
      InitialParent   =   ""
      Italic          =   False
      Left            =   266
      LockBottom      =   True
      LockedInPosition=   False
      LockLeft        =   True
      LockRight       =   False
      LockTop         =   False
      Scope           =   0
      State           =   1
      TabIndex        =   27
      TabPanelIndex   =   0
      TabStop         =   True
      TextFont        =   "System"
      TextSize        =   0.0
      TextUnit        =   0
      Top             =   444
      Transparent     =   False
      Underline       =   False
      Value           =   True
      Visible         =   False
      Width           =   62
   End
   Begin PushButton SaveList
      AutoDeactivate  =   True
      Bold            =   False
      ButtonStyle     =   "0"
      Cancel          =   False
      Caption         =   "Save List..."
      Default         =   False
      Enabled         =   True
      Height          =   20
      HelpTag         =   "Save grid list as csv file"
      Index           =   -2147483648
      InitialParent   =   ""
      Italic          =   False
      Left            =   814
      LockBottom      =   True
      LockedInPosition=   False
      LockLeft        =   False
      LockRight       =   True
      LockTop         =   False
      Scope           =   0
      TabIndex        =   28
      TabPanelIndex   =   0
      TabStop         =   True
      TextFont        =   "System"
      TextSize        =   0.0
      TextUnit        =   0
      Top             =   481
      Transparent     =   False
      Underline       =   False
      Visible         =   True
      Width           =   80
   End
   Begin PushButton LoadList
      AutoDeactivate  =   True
      Bold            =   False
      ButtonStyle     =   "0"
      Cancel          =   False
      Caption         =   "Open List..."
      Default         =   False
      Enabled         =   True
      Height          =   20
      HelpTag         =   "Import grid list from csv file"
      Index           =   -2147483648
      InitialParent   =   ""
      Italic          =   False
      Left            =   906
      LockBottom      =   True
      LockedInPosition=   False
      LockLeft        =   False
      LockRight       =   True
      LockTop         =   False
      Scope           =   0
      TabIndex        =   29
      TabPanelIndex   =   0
      TabStop         =   True
      TextFont        =   "System"
      TextSize        =   0.0
      TextUnit        =   0
      Top             =   481
      Transparent     =   False
      Underline       =   False
      Visible         =   True
      Width           =   80
   End
   Begin CheckBox alt_text
      AutoDeactivate  =   True
      Bold            =   False
      Caption         =   "Large Grid Names"
      DataField       =   ""
      DataSource      =   ""
      Enabled         =   True
      Height          =   20
      HelpTag         =   "Displays large grid name in centre of each grid"
      Index           =   -2147483648
      InitialParent   =   ""
      Italic          =   False
      Left            =   220
      LockBottom      =   True
      LockedInPosition=   False
      LockLeft        =   True
      LockRight       =   False
      LockTop         =   False
      Scope           =   0
      State           =   1
      TabIndex        =   30
      TabPanelIndex   =   0
      TabStop         =   True
      TextFont        =   "System"
      TextSize        =   0.0
      TextUnit        =   0
      Top             =   481
      Transparent     =   False
      Underline       =   False
      Value           =   True
      Visible         =   True
      Width           =   126
   End
   Begin PushButton SaveAsCanvas
      AutoDeactivate  =   True
      Bold            =   False
      ButtonStyle     =   "0"
      Cancel          =   False
      Caption         =   "Save Canvas As.."
      Default         =   False
      Enabled         =   True
      Height          =   20
      HelpTag         =   "Save just the grid within the canvas if selected\notherwise save all grids within the canvas."
      Index           =   -2147483648
      InitialParent   =   ""
      Italic          =   False
      Left            =   158
      LockBottom      =   True
      LockedInPosition=   False
      LockLeft        =   True
      LockRight       =   False
      LockTop         =   False
      Scope           =   0
      TabIndex        =   9
      TabPanelIndex   =   0
      TabStop         =   True
      TextFont        =   "System"
      TextSize        =   0.0
      TextUnit        =   0
      Top             =   653
      Transparent     =   False
      Underline       =   False
      Visible         =   True
      Width           =   126
   End
   Begin Label deselect
      AutoDeactivate  =   True
      Bold            =   False
      DataField       =   ""
      DataSource      =   ""
      Enabled         =   True
      Height          =   15
      HelpTag         =   ""
      Index           =   -2147483648
      InitialParent   =   ""
      Italic          =   False
      Left            =   90
      LockBottom      =   True
      LockedInPosition=   False
      LockLeft        =   True
      LockRight       =   False
      LockTop         =   False
      Multiline       =   False
      Scope           =   0
      Selectable      =   False
      TabIndex        =   31
      TabPanelIndex   =   0
      TabStop         =   False
      Text            =   "De-select for all grids"
      TextAlign       =   0
      TextColor       =   &cFF000000
      TextFont        =   "System"
      TextSize        =   0.0
      TextUnit        =   0
      Top             =   679
      Transparent     =   True
      Underline       =   False
      Visible         =   False
      Width           =   135
   End
   Begin PushButton SaveAsGrid
      AutoDeactivate  =   True
      Bold            =   False
      ButtonStyle     =   "0"
      Cancel          =   False
      Caption         =   "Save All Grids As..."
      Default         =   False
      Enabled         =   True
      Height          =   20
      HelpTag         =   "Save just the grid if selected\notherwise save all grids."
      Index           =   -2147483648
      InitialParent   =   ""
      Italic          =   False
      Left            =   27
      LockBottom      =   True
      LockedInPosition=   False
      LockLeft        =   True
      LockRight       =   False
      LockTop         =   False
      Scope           =   0
      TabIndex        =   33
      TabPanelIndex   =   0
      TabStop         =   True
      TextFont        =   "System"
      TextSize        =   0.0
      TextUnit        =   0
      Top             =   653
      Transparent     =   False
      Underline       =   False
      Visible         =   True
      Width           =   126
   End
   Begin CheckBox Grid_Solo
      AutoDeactivate  =   True
      Bold            =   False
      Caption         =   "Grid Solo"
      DataField       =   ""
      DataSource      =   ""
      Enabled         =   True
      Height          =   20
      HelpTag         =   ""
      Index           =   -2147483648
      InitialParent   =   ""
      Italic          =   False
      Left            =   292
      LockBottom      =   True
      LockedInPosition=   False
      LockLeft        =   True
      LockRight       =   False
      LockTop         =   False
      Scope           =   0
      State           =   0
      TabIndex        =   34
      TabPanelIndex   =   0
      TabStop         =   True
      TextFont        =   "System"
      TextSize        =   0.0
      TextUnit        =   0
      Top             =   653
      Transparent     =   False
      Underline       =   False
      Value           =   False
      Visible         =   False
      Width           =   76
   End
   Begin Rectangle ColorPicker
      AutoDeactivate  =   True
      BorderWidth     =   0
      BottomRightColor=   &c00000000
      Enabled         =   True
      FillColor       =   &cFFFF0000
      Height          =   20
      HelpTag         =   ""
      Index           =   -2147483648
      InitialParent   =   ""
      Left            =   355
      LockBottom      =   True
      LockedInPosition=   False
      LockLeft        =   True
      LockRight       =   False
      LockTop         =   False
      Scope           =   0
      TabIndex        =   35
      TabPanelIndex   =   0
      Top             =   481
      TopLeftColor    =   &c00000000
      Transparent     =   False
      Visible         =   True
      Width           =   27
   End
   Begin Label Label1
      AutoDeactivate  =   True
      Bold            =   False
      DataField       =   ""
      DataSource      =   ""
      Enabled         =   True
      Height          =   20
      HelpTag         =   ""
      Index           =   -2147483648
      InitialParent   =   ""
      Italic          =   False
      Left            =   385
      LockBottom      =   True
      LockedInPosition=   False
      LockLeft        =   True
      LockRight       =   False
      LockTop         =   False
      Multiline       =   False
      Scope           =   0
      Selectable      =   False
      TabIndex        =   36
      TabPanelIndex   =   0
      TabStop         =   False
      Text            =   "Text Colour"
      TextAlign       =   0
      TextColor       =   &c00000000
      TextFont        =   "System"
      TextSize        =   0.0
      TextUnit        =   0
      Top             =   481
      Transparent     =   True
      Underline       =   False
      Visible         =   True
      Width           =   74
   End
   Begin CheckBox GridColour
      AutoDeactivate  =   True
      Bold            =   False
      Caption         =   "Colour Grid"
      DataField       =   ""
      DataSource      =   ""
      Enabled         =   True
      Height          =   20
      HelpTag         =   "Displays large grid name in centre of each grid"
      Index           =   -2147483648
      InitialParent   =   ""
      Italic          =   False
      Left            =   469
      LockBottom      =   True
      LockedInPosition=   False
      LockLeft        =   True
      LockRight       =   False
      LockTop         =   False
      Scope           =   0
      State           =   1
      TabIndex        =   37
      TabPanelIndex   =   0
      TabStop         =   True
      TextFont        =   "System"
      TextSize        =   0.0
      TextUnit        =   0
      Top             =   481
      Transparent     =   False
      Underline       =   False
      Value           =   True
      Visible         =   True
      Width           =   94
   End
   Begin TextField CanvasText
      AcceptTabs      =   False
      Alignment       =   0
      AutoDeactivate  =   True
      AutomaticallyCheckSpelling=   False
      BackColor       =   &cFFFFFF00
      Bold            =   False
      Border          =   True
      CueText         =   "Canvas Name..."
      DataField       =   ""
      DataSource      =   ""
      Enabled         =   True
      Format          =   ""
      Height          =   22
      HelpTag         =   "Displays Canvas Name and Resolution"
      Index           =   -2147483648
      Italic          =   False
      Left            =   443
      LimitText       =   0
      LockBottom      =   True
      LockedInPosition=   False
      LockLeft        =   True
      LockRight       =   False
      LockTop         =   False
      Mask            =   ""
      Password        =   False
      ReadOnly        =   False
      Scope           =   0
      TabIndex        =   38
      TabPanelIndex   =   0
      TabStop         =   True
      Text            =   ""
      TextColor       =   &c00000000
      TextFont        =   "System"
      TextSize        =   0.0
      TextUnit        =   0
      Top             =   444
      Transparent     =   False
      Underline       =   False
      UseFocusRing    =   True
      Visible         =   True
      Width           =   193
   End
   Begin PopupMenu TextPos
      AutoDeactivate  =   True
      Bold            =   False
      DataField       =   ""
      DataSource      =   ""
      Enabled         =   True
      Height          =   23
      HelpTag         =   "Canvas stats position"
      Index           =   -2147483648
      InitialParent   =   ""
      InitialValue    =   "Top Left\nTop Centre\nTop Right\nBottom Left\nBottom Centre\nBottom Right"
      Italic          =   False
      Left            =   640
      ListIndex       =   0
      LockBottom      =   True
      LockedInPosition=   False
      LockLeft        =   True
      LockRight       =   False
      LockTop         =   False
      Scope           =   2
      TabIndex        =   52
      TabPanelIndex   =   0
      TabStop         =   True
      TextFont        =   "System"
      TextSize        =   0.0
      TextUnit        =   0
      Top             =   442
      Transparent     =   False
      Underline       =   False
      Visible         =   False
      Width           =   118
   End
   Begin CheckBox MaskMode
      AutoDeactivate  =   True
      Bold            =   False
      Caption         =   "Mask"
      DataField       =   ""
      DataSource      =   ""
      Enabled         =   True
      Height          =   20
      HelpTag         =   ""
      Index           =   -2147483648
      InitialParent   =   ""
      Italic          =   False
      Left            =   373
      LockBottom      =   True
      LockedInPosition=   False
      LockLeft        =   True
      LockRight       =   False
      LockTop         =   False
      Scope           =   0
      State           =   0
      TabIndex        =   53
      TabPanelIndex   =   0
      TabStop         =   True
      TextFont        =   "System"
      TextSize        =   0.0
      TextUnit        =   0
      Top             =   653
      Transparent     =   False
      Underline       =   False
      Value           =   False
      Visible         =   False
      Width           =   56
   End
   Begin PushButton SaveList1
      AutoDeactivate  =   True
      Bold            =   False
      ButtonStyle     =   "0"
      Cancel          =   False
      Caption         =   "AE Export..."
      Default         =   False
      Enabled         =   True
      Height          =   20
      HelpTag         =   "Creates an After Effects Script to generate canvas"
      Index           =   -2147483648
      InitialParent   =   ""
      Italic          =   False
      Left            =   710
      LockBottom      =   True
      LockedInPosition=   False
      LockLeft        =   False
      LockRight       =   True
      LockTop         =   False
      Scope           =   0
      TabIndex        =   54
      TabPanelIndex   =   0
      TabStop         =   True
      TextFont        =   "System"
      TextSize        =   0.0
      TextUnit        =   0
      Top             =   481
      Transparent     =   False
      Underline       =   False
      Visible         =   True
      Width           =   94
   End
   Begin BevelButton FitV_button
      AcceptFocus     =   False
      AutoDeactivate  =   True
      BackColor       =   &c00000000
      Bevel           =   0
      Bold            =   False
      ButtonType      =   0
      Caption         =   "Fit V"
      CaptionAlign    =   3
      CaptionDelta    =   0
      CaptionPlacement=   1
      Enabled         =   True
      HasBackColor    =   False
      HasMenu         =   0
      Height          =   17
      HelpTag         =   ""
      Icon            =   0
      IconAlign       =   0
      IconDX          =   0
      IconDY          =   0
      Index           =   -2147483648
      InitialParent   =   ""
      Italic          =   False
      Left            =   948
      LockBottom      =   True
      LockedInPosition=   False
      LockLeft        =   False
      LockRight       =   True
      LockTop         =   False
      MenuValue       =   0
      Scope           =   0
      TabIndex        =   55
      TabPanelIndex   =   0
      TabStop         =   True
      TextColor       =   &c00000000
      TextFont        =   "System"
      TextSize        =   0.0
      TextUnit        =   0
      Top             =   434
      Transparent     =   False
      Underline       =   False
      Value           =   False
      Visible         =   True
      Width           =   39
   End
   Begin BevelButton FitH_button
      AcceptFocus     =   False
      AutoDeactivate  =   True
      BackColor       =   &c00000000
      Bevel           =   0
      Bold            =   False
      ButtonType      =   0
      Caption         =   "Fit H"
      CaptionAlign    =   3
      CaptionDelta    =   0
      CaptionPlacement=   1
      Enabled         =   True
      HasBackColor    =   False
      HasMenu         =   0
      Height          =   17
      HelpTag         =   ""
      Icon            =   0
      IconAlign       =   0
      IconDX          =   0
      IconDY          =   0
      Index           =   -2147483648
      InitialParent   =   ""
      Italic          =   False
      Left            =   909
      LockBottom      =   True
      LockedInPosition=   False
      LockLeft        =   False
      LockRight       =   True
      LockTop         =   False
      MenuValue       =   0
      Scope           =   0
      TabIndex        =   56
      TabPanelIndex   =   0
      TabStop         =   True
      TextColor       =   &c00000000
      TextFont        =   "System"
      TextSize        =   0.0
      TextUnit        =   0
      Top             =   434
      Transparent     =   False
      Underline       =   False
      Value           =   False
      Visible         =   True
      Width           =   39
   End
   Begin BevelButton OnetoOneButton
      AcceptFocus     =   False
      AutoDeactivate  =   True
      BackColor       =   &c00000000
      Bevel           =   0
      Bold            =   False
      ButtonType      =   0
      Caption         =   "1:1"
      CaptionAlign    =   3
      CaptionDelta    =   0
      CaptionPlacement=   1
      Enabled         =   True
      HasBackColor    =   False
      HasMenu         =   0
      Height          =   17
      HelpTag         =   ""
      Icon            =   0
      IconAlign       =   0
      IconDX          =   0
      IconDY          =   0
      Index           =   -2147483648
      InitialParent   =   ""
      Italic          =   False
      Left            =   909
      LockBottom      =   True
      LockedInPosition=   False
      LockLeft        =   False
      LockRight       =   True
      LockTop         =   False
      MenuValue       =   0
      Scope           =   0
      TabIndex        =   57
      TabPanelIndex   =   0
      TabStop         =   True
      TextColor       =   &c00000000
      TextFont        =   "System"
      TextSize        =   0.0
      TextUnit        =   0
      Top             =   451
      Transparent     =   False
      Underline       =   False
      Value           =   False
      Visible         =   True
      Width           =   39
   End
   Begin Rectangle Rectangle3
      AutoDeactivate  =   True
      BorderWidth     =   1
      BottomRightColor=   &c00000000
      Enabled         =   True
      FillColor       =   &cFFFFFF00
      Height          =   34
      HelpTag         =   ""
      Index           =   -2147483648
      InitialParent   =   ""
      Left            =   768
      LockBottom      =   True
      LockedInPosition=   False
      LockLeft        =   False
      LockRight       =   True
      LockTop         =   False
      Scope           =   0
      TabIndex        =   58
      TabPanelIndex   =   0
      Top             =   436
      TopLeftColor    =   &c00000000
      Transparent     =   False
      Visible         =   True
      Width           =   1
   End
   Begin Label Label9
      AutoDeactivate  =   True
      Bold            =   False
      DataField       =   ""
      DataSource      =   ""
      Enabled         =   True
      Height          =   22
      HelpTag         =   ""
      Index           =   -2147483648
      InitialParent   =   ""
      Italic          =   False
      Left            =   834
      LockBottom      =   True
      LockedInPosition=   False
      LockLeft        =   False
      LockRight       =   True
      LockTop         =   False
      Multiline       =   False
      Scope           =   0
      Selectable      =   False
      TabIndex        =   59
      TabPanelIndex   =   0
      TabStop         =   False
      Text            =   "Zoom"
      TextAlign       =   0
      TextColor       =   &c00000000
      TextFont        =   "System"
      TextSize        =   0.0
      TextUnit        =   0
      Top             =   671
      Transparent     =   True
      Underline       =   False
      Visible         =   False
      Width           =   44
   End
   Begin PopupMenu col_alpha
      AutoDeactivate  =   True
      Bold            =   False
      DataField       =   ""
      DataSource      =   ""
      Enabled         =   True
      Height          =   20
      HelpTag         =   ""
      Index           =   -2147483648
      InitialParent   =   ""
      InitialValue    =   "Numbers\nColumn Letters\nRow Letters"
      Italic          =   False
      Left            =   582
      ListIndex       =   0
      LockBottom      =   True
      LockedInPosition=   False
      LockLeft        =   True
      LockRight       =   False
      LockTop         =   False
      Scope           =   0
      TabIndex        =   61
      TabPanelIndex   =   0
      TabStop         =   True
      TextFont        =   "System"
      TextSize        =   0.0
      TextUnit        =   0
      Top             =   481
      Transparent     =   False
      Underline       =   False
      Visible         =   True
      Width           =   109
   End
   Begin CheckBox T_Canvas
      AutoDeactivate  =   True
      Bold            =   False
      Caption         =   "Trans BG"
      DataField       =   ""
      DataSource      =   ""
      Enabled         =   True
      Height          =   22
      HelpTag         =   "Display Top Left start point cursor and co-ordinates"
      Index           =   -2147483648
      InitialParent   =   ""
      Italic          =   False
      Left            =   331
      LockBottom      =   True
      LockedInPosition=   False
      LockLeft        =   True
      LockRight       =   False
      LockTop         =   False
      Scope           =   0
      State           =   1
      TabIndex        =   62
      TabPanelIndex   =   0
      TabStop         =   True
      TextFont        =   "System"
      TextSize        =   0.0
      TextUnit        =   0
      Top             =   444
      Transparent     =   False
      Underline       =   False
      Value           =   True
      Visible         =   False
      Width           =   81
   End
End
#tag EndWindow

#tag WindowCode
	#tag Event
		Sub Close()
		  If Not Preferences.Save Then
		    MsgBox("Could not save preferences.")
		  End If
		  
		  FileClose.Visible=false
		  
		  Window2.Close()
		End Sub
	#tag EndEvent

	#tag Event
		Function KeyDown(Key As String) As Boolean
		  'Select case asc(key)
		  'case  43
		  ''+ zoom in
		  'case 45
		  ''- zoom out
		  'case 72,104
		  ''FitH
		  'FitH()
		  'case 86,118
		  ''FitV
		  'FitV()
		  'case 70,102
		  ''1:1
		  'mScale=100
		  'Window1.Canvas1.Refresh
		  'zoom.Text=str(mScale)+"%"
		  '
		  'case 27
		  'Window2.FullScreen=false
		  '
		  'else
		  '
		  'end
		  
		  
		End Function
	#tag EndEvent

	#tag Event
		Sub Open()
		  maxWinHeight =Window1.MinHeight '842
		  maxWinWidth = Window1.MinWidth '1010
		  CanvasHmargin =maxWinWidth-Canvas1.Width '50
		  CanvasVMargin =maxWinHeight-Canvas1.Height '302
		  'T_Canvas.value = Preferences.Tcanvas
		  me.left = screen(0).left
		  me.top = screen(0).top+50
		  
		  rebuild=true
		  
		  
		  
		  
		  
		  
		  
		End Sub
	#tag EndEvent

	#tag Event
		Sub Resizing()
		  'debug.listbox1.InsertRow("Resize")
		  'UpdateScreen()
		End Sub
	#tag EndEvent


	#tag Method, Flags = &h0
		Sub AEexport()
		  dim f as folderitem
		  dim tos as textOutputStream
		  dim s as string
		  dim i, j as integer
		  dim Red,Green,Blue as Integer
		  
		  'show standard file selector
		  f= GetSaveFolderItem(ExtendScript.jsx,"AE script - "+CanvasText.text+".jsx")
		  if f = nil then exit sub                              'cancel clicked
		  
		  'create file
		  tos = f.CreateTextFile
		  if tos = nil then                                       'failed?
		    MsgBox("The file could not be created!")
		    exit sub
		  end if
		  
		  s = AE1 + Window1.OutH.Text +";" + chr(10) + "  var compH = " + Window1.OutV.text + AE1a + Preferences.AEduration+ AE1b + Preferences.AEframerate + AE2 + CanvasText.text +AE2a
		  
		  tos.WriteLine s.left(s.len-1)                'save line
		  
		  if GridsList.ListCount>0 then                   'if grid not empty
		    for i=0 to GridsList.ListCount-1            'for each row
		      
		      if Preferences.AErandom then
		        Red = rnd() * 255
		        Green = rnd() * 255
		        Blue = rnd() * 255
		      else
		        Red = 127
		        Green = 127
		        Blue = 127
		      end if
		      
		      dim gridWidth as Integer = val(GridsList.cell(i,0)) * val(GridsList.cell(i,2))
		      dim gridHeight as Integer = val(GridsList.cell(i,1)) * val(GridsList.cell(i,3))
		      s= "  var compW = " + str(gridWidth) + ";" + chr(10) + "  var compH = " + str(gridHeight) + AE3 + GridsList.Cell(i,6) +AE3a +str(Red)+"/255,"+str(Green)+"/255,"+str(Blue)+"/255"+AE3b
		      tos.WriteLine s.left(s.len-1)                'save line
		      
		      if withGrids then 
		        s = AE3c + "Grid-" +GridsList.Cell(i,6) + "-"+str(gridWidth) + "x" +str(gridHeight) +".png" + AE3d
		        tos.WriteLine s.left(s.len-1)                'save line
		      end if
		      
		      s = AE3e+ GridsList.cell(i,4) + "," + GridsList.cell(i,5) + "]);" + chr(10) + chr(10)
		      
		      tos.WriteLine s.left(s.len-1)                'save line
		    next
		    
		  end 
		  
		  
		  s= "  app.endUndoGroup();" +chr(10) + "  }" + chr(10)
		  
		  tos.WriteLine s.left(s.len-1)                'save line
		  
		  
		  tos.Close                                                 'close file
		  
		  
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub BuildGrid(Index As integer)
		  'debug.listbox1.InsertRow(0,"BuildGrid" + str(Index)+","+str(ScaleFactor))
		  'MsgBox(str(ScaleFactor))
		  
		  dim i,j,k,l,tileX,tileY,screenWidth, screenHeight,rcount,colcount,c2count,colorbarsHeight as Integer
		  dim logoRatio as Double
		  dim x,y,totX,totY,logoSize,logoHeight as Integer
		  dim textsize as Single
		  dim gridColor(), bgColor() as color
		  dim id as string
		  
		  dim alphabet() as text = Array("a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"_
		  ,"aa","ab","ac","ad","ae","af","ag","ah","ai","aj","ak","al","am","an","ao","ap","aq","ar","as","at","au","av","aw","ax","ay","az"_
		  ,"ba","bb","bc","bd","be","bf","bg","bh","bi","bj","bk","bl","bm","bn","bo","bp","bq","br","bs","bt","bu","bv","bw","bx","by","bz"_
		  ,"ca","cb","cc","cd","ce","cf","cg","ch","ci","cj","ck","cl","cm","cn","co","cp","cq","cr","cs","ct","cu","cv","cw","cx","cy","cz"_
		  ,"da","db","dc","dd","de","df","dg","dh","di","dj","dk","dl","dm","dn","do","dp","dq","dr","ds","dt","du","dv","dw","dx","dy","dz")
		  
		  
		  dim circlesize as integer
		  
		  if GridsList.ListCount <>0 then
		    
		    Canvas1.EraseBackground = True
		    
		    tileX = val(GridsList.cell(Index,0))'/ScaleFactor
		    tileY = val(GridsList.cell(Index,1))'/ScaleFactor
		    screenWidth= val(GridsList.cell(Index,2))'/ScaleFactor
		    screenHeight= val(GridsList.cell(Index,3))'/ScaleFactor
		    
		    
		    
		    x = 0
		    y = 0
		    k = 1
		    l = 1
		    rcount = 1
		    colcount = 1
		    c2count = 1
		    totX = (tileX*screenWidth)'/ScaleFactor
		    totY = (tileY*screenHeight)'/ScaleFactor
		    
		    MyPic = Self.BitmapForCaching(totX/ScaleFactor,totY/ScaleFactor)
		    
		    MyPic.Graphics.TextFont="Helvetica"
		    MyPic.Graphics.TextUnit=FontUnits.Pixel
		    
		    
		    
		    myPic.VerticalResolution = 72
		    myPic.HorizontalResolution = 72
		    
		    myPic.Graphics.ScaleX = 1
		    myPic.Graphics.ScaleY = 1
		    
		    
		    mypic.Graphics.PenHeight = 1
		    mypic.Graphics.PenWidth = 1
		    
		    
		    MyPic.Graphics.TextSize=max((min(tileY/5,tileX/5)),8)'font size is fifth of tileY or8pixels min
		    
		    gridColor = Array(&c000000,&cff0000,&c00ff00,&c0000ff,&cffff00,&c00ffff,&cff00ff,&cffffff)
		    
		    
		    Select Case GridsList.celltag(Index,7) 'FilledPopUp.ListIndex
		      
		    Case "100% Colour"
		      '100%
		      'bgColor=Array(&cffffff,&cff0000,&c00ff00,&c0000ff,&cffff00,&cff00ff,&c00ffff,&c000000)
		      bgColor = Array(&cffffff,&cff00ff,&c00ffff,&cffff00,&c0000ff,&c00ff00,&cff0000,&c000000)
		    Case "50% Colour"
		      '50%
		      bgColor =   Array(&c7e7e7e,&c7e007e,&c007e7e,&c7e7e00,&c00007e,&c007e00,&c7e0000,&c000000)
		    Case "25% Colour"
		      '25%
		      bgColor = Array(&c3F3F3F,&c3F003F,&c003F3F,&c3F3F00,&c00003F,&c003F00,&c3F0000,&c000000)
		    Case "White"
		      'White
		      bgColor = Array(&c3F3F3F,&cFFFFFF,&cFFFFFF,&cFFFFFF,&cFFFFFF,&cFFFFFF,&cFFFFFF,&c000000)
		    Case "Black"
		      'Black
		      bgColor = Array(&c3F3F3F,&c000000,&c000000,&c000000,&c000000,&c000000,&c000000,&c000000)
		    Case "Transparent"
		      'Blank
		      bgColor = Array(&c3F3F3F00,&c000000ff,&c000000ff,&c000000ff,&c000000ff,&c000000ff,&c000000ff,&c00000000)
		    Case "Red/Gray"
		      'Red/Gray
		      bgColor = Array(&c3F3F3F,&cdd3c46,&c3F3F3F,&c000000)
		    Case "Green/Gray"
		      'Green/Gray
		      bgColor = Array(&c3F3F3F,&c2baa3a,&c3F3F3F,&c000000)
		    Case "Blue/Gray"
		      'Blue/Gray
		      bgColor = Array(&c3F3F3F,&c0048c3,&c3F3F3F,&c000000)
		    Case "Red/Green"
		      'Red/Green
		      bgColor = Array(&c3F3F3F,&cdd3c46,&c2baa3a,&c000000)
		    Case  "Green/Blue"
		      'Green/Blue
		      bgColor = Array(&c3F3F3F,&c2baa3a,&c0048c3,&c000000)
		    Case "Blue/Red"
		      'Blue/Red
		      bgColor = Array(&c3F3F3F,&c0048c3,&cdd3c46,&c000000)
		    Case "Black/White"
		      'Black/White
		      bgColor = Array(&c3F3F3F,&c000000,&cFFFFFF,&c000000)
		    Case "Light Gray/Dark Gray"
		      'LightGray/DarkGray
		      bgColor = Array(&c3F3F3F,&c3F3F3F,&c7E7E7E,&c000000)
		    Case "Yellow/Gray"
		      'Yellow/Gray
		      bgColor = Array(&c3F3F3F,&cf4d51a,&c3f3f3f,&c000000)
		    Case "Orange/Gray"
		      'Orange/Gray
		      bgColor = Array(&c3F3F3F,&cff5722,&c3f3f3f,&c000000)
		    Case "Aqua/Gray"
		      'Aqua/Gray
		      bgColor = Array(&c3F3F3F,&c0ea7b5,&c3f3f3f,&c000000)
		    Case "Purple/Gray"
		      'Purple/Gray
		      bgColor = Array(&c3F3F3F,&c9c6fda,&c3f3f3f,&c000000)
		    Case "Rainbow"
		      'Rainbow &c4b008200,
		      bgColor = Array(&c3F3F3F00,&c9400d300,&c0000ff00,&c00ff0000,&cffff0000,&cff7f0000,&cff000000,&c00000000)
		    Case "Alt Red"
		      'ALT Red
		      bgColor = Array(&c3F3F3F00,&cFF000000,&cCC000000,&c00000000)
		    Case "Alt Green"
		      'Alt Green
		      bgColor = Array(&c3F3F3F00,&c00FF0000,&c00CC0000,&c00000000)
		    Case "Alt Blue"
		      'Alt Blue
		      bgColor = Array(&c3F3F3F00,&c0000FF00,&c0000CC00,&c00000000)
		    Case "Grayscale V" , "Grayscale H"
		      'Grayscale
		      bgColor=Array(&c3F3F3F00,&c00000000,&c33333300,&c66666600,&c99999900,&cCCCCCC00,&cFFFFFF00,&c00000000)
		    Case "Fruit"
		      'Apple Logo
		      bgColor = Array(&c3F3F3F00,&c118AD400,&c82258500 ,&cD6222E00,&cF16C1A00 ,&cF8AA1F00,&c52B13700 ,&c00000000)
		    Case "Full Red"
		      'Red
		      bgColor = Array(&c3F3F3F,&cFF000000,&c000000)
		    Case "Full Green"
		      'Green
		      bgColor = Array(&c3F3F3F,&c00FF0000,&c000000)
		    Case "Full Blue"
		      'Blue
		      bgColor = Array(&c3F3F3F,&c0000FF00,&c000000)
		    Case "Reduced/Full Check"
		      'Blue
		      bgColor = Array(&c3F3F3F,&c000000,&c101010,&cebebeb,&cffffff,&c000000)
		      
		    Else
		      bgColor = Array(&c3F3F3F,&c3F003F,&c003F3F,&c3F3F00,&c00003F,&c003F00,&c3F0000,&c000000)
		    End Select
		    
		    
		    
		    for j = 1  to screenHeight //draw row
		      
		      for i = 1 to screenWidth //draw column
		        if val(GridsList.cell(Index,7)) = 5 then
		          'Blank BG
		          
		        elseif val(GridsList.cell(Index,7)) = 3 then
		          'White BG
		          MyPic.Graphics.ForeColor  = &cffffff
		          MyPic.Graphics.FillRect(x,y,tileX,tileY)
		        elseif val(GridsList.cell(Index,7)) = 4 then
		          'Black BG
		          MyPic.Graphics.ForeColor  = &c000000
		          MyPic.Graphics.FillRect(x,y,tileX,tileY)
		          
		        else
		          MyPic.Graphics.ForeColor  = (bgColor(k))
		          MyPic.Graphics.FillRect(x,y,tileX,tileY)
		        end
		        
		        if GridsList.cellcheck(Index,8) then
		          if GridColour.Value then
		            MyPic.Graphics.ForeColor  = (gridColor(l))
		          else
		            MyPic.Graphics.ForeColor  = &cFFFFFF00
		          end
		          MyPic.Graphics.DrawRect(x, y, tileX,tileY)
		        end
		        
		        'if FilledPopUp.ListIndex = 3 then
		        if (bgColor(k))=&cFFFFFF00 then
		          MyPic.Graphics.ForeColor  = &c656565 '(gridColor(0))
		        else
		          MyPic.Graphics.ForeColor  = (gridColor(7))
		        end
		        
		        if GridsList.cellcheck(Index,10) then
		          if col_alpha.ListIndex = 1 then
		            dim alpha as integer =  ((i-1) mod (Ubound(alphabet)+1))
		            id = (Uppercase(alphabet(alpha)) + "," +str(j))                                      //row, column numbering
		          elseif col_alpha.ListIndex = 2 then
		            dim alpha as integer =  ((j-1) mod (Ubound(alphabet)+1))
		            id = (str(i) + "," +Uppercase(alphabet(alpha)))                                      //row, column numbering
		          else
		            id = (str(j) + "," +str(i))                                      //row, column numbering
		          end
		          
		          'MyPic.Graphics.DrawString(id, (x+1),(y+max((tileY/5),8)))           //tile address
		          MyPic.Graphics.DrawString(id, (x+1),(y+MyPic.Graphics.StringHeight(id,tileX)))  
		        end
		        
		        x = x + tileX
		        l=l+1
		        if l > Ubound(gridColor)-1 then
		          l=1
		        end
		        if GridsList.celltag(Index,7) <> "Grayscale H" then 'check for grayscale H and dont increment
		          rcount = rcount +1
		        end
		        if rcount  > Ubound(bgColor)-1 then
		          rcount = 1
		        end
		        k = rcount     'colour is row count
		      next
		      
		      if GridsList.celltag(Index,7) <> "Grayscale V" then 'check for grayscale V and dont increment
		        c2count = c2count + 1
		        colcount = colcount + 1
		      end
		      
		      if c2count > Ubound(gridcolor) -1 then
		        c2count = 1
		      end
		      l = c2count
		      
		      if colcount > Ubound(bgColor)-1 then
		        colcount = 1
		      end
		      rcount = colcount
		      k = colcount
		      
		      x = 0
		      y = y + tileY
		      
		    next
		    
		    'draw diagonal cross
		    if GridsList.cellcheck(Index,12) then
		      myPic.Graphics.ForeColor = &c00ffff
		      MyPic.graphics.DrawLine ( 0,0,totX,totY)
		      MyPic.graphics.DrawLine ( 0,totY,totX,0)
		    end
		    
		    'Draw colorbars
		    if GridsList.cellcheck(Index,15)  then
		      if totY > totX then 
		        myPic.Graphics.DrawPicture(colorbars, 10,((totY/2)-(totY/10))   ,(totX-20),(totY/5)    ,0,0,1920,330)
		        'colorbarsHeight = (totY/5)-((totY/2)-(totY/10))
		        colorbarsHeight = (totY/5)
		      else
		        myPic.Graphics.DrawPicture(colorbars,  ((totX/2)-(totY/2)+10),((totY/2)-(totY/10))   ,(totY-20),(totY/5),0,0,1920,330)
		        'colorbarsHeight = (totY/5)-((totY/2)-(totY/10))
		        colorbarsHeight = (totY/5)
		      end
		    end
		    
		    
		    
		    'Draw Circle
		    if GridsList.cellcheck(Index,11) then 
		      
		      circlesize =min((totY),(totX))
		      
		      if val(GridsList.cell(Index,8))= 3 then
		        MyPic.Graphics.ForeColor  = &c000000
		      else
		        MyPic.Graphics.ForeColor  = &cffffff
		      end
		      MyPic.Graphics.DrawOval((totX/2)-(circlesize/2),(totY/2)-(circlesize/2),circlesize,circlesize)
		    end
		    
		    
		    
		    
		    if GridsList.cellcheck(Index,13) then 
		      'Draw Corner circles
		      'TL-Red
		      circlesize = min((myPic.Height/2)-5,(totX/2)-5,tileX*2)
		      
		      myPic.graphics.ForeColor = &cff0000
		      MyPic.Graphics.DrawOval(0,0,circlesize,circlesize)
		      'TR-Green
		      myPic.graphics.ForeColor = &c00ff00
		      MyPic.Graphics.DrawOval((totX-circlesize),0,circlesize,circlesize)
		      'BL-Blue
		      myPic.graphics.ForeColor = &c0000ff
		      MyPic.Graphics.DrawOval(0,(totY-circlesize),circlesize,circlesize)
		      'BR-Yellow
		      myPic.graphics.ForeColor = &cffff00
		      MyPic.Graphics.DrawOval((totX-circlesize),(totY-circlesize),circlesize,circlesize)
		      myPic.graphics.ForeColor = &cffffff
		    end
		    
		    if GridsList.cellcheck(Index,9) then 
		      'Draw canvas Raster
		      
		      if val(GridsList.cell(Index,7)) = 3 then
		        MyPic.Graphics.ForeColor  = &c000000
		      else
		        MyPic.Graphics.ForeColor  = &cffffff
		      end
		      MyPic.Graphics.DrawRect(0,0,totX,totY)
		    end
		    
		    'Draw logo
		    
		    
		    if totX > totY then
		      logoSize= min(totX,icon.width)
		      logoHeight=(icon.height/icon.width)*logoSize
		      while logoHeight > (totY-5) or logoSize > totX/4
		        logoSize = logoSize -1
		        logoHeight=(icon.height/icon.width)*logoSize
		      wend
		    else
		      logoSize= min(totX,icon.width)
		      logoHeight=(icon.height/icon.width)*logoSize
		      while logoHeight > (totY-5) or logoSize > totX/1.5
		        logoSize = logoSize -1
		        logoHeight=(icon.height/icon.width)*logoSize
		      wend
		    end
		    
		    
		    
		    
		    if GridsList.cellcheck(Index,14) then 
		      myPic.Graphics.Transparency = app.logoOpacity
		      'myPic.Graphics.DrawPicture(icon,(totX-(logoSize)-(tileX*2)),(totY-(logoSize)-3),(logoSize),(logoSize),0,0,icon.width,icon.height)
		      myPic.Graphics.DrawPicture(icon,(totX-(logoSize+3)),(totY-(logoHeight)-3),(logoSize),(logoHeight),0,0,icon.width,icon.height)
		    end
		    
		    
		    'custom text
		    myPic.Graphics.Transparency = 0
		    if (GridsList.cell(Index,6)) <> ""  then 
		      circlesize =min((totY),(totX))
		      MyPic.Graphics.ForeColor  = ColorPicker.FillColor
		      
		      if alt_text.value then
		        id = (GridsList.cell(Index,6))
		        
		        textsize = 250                            'initial text size before resize 
		        MyPic.Graphics.TextSize=textsize
		        MyPic.Graphics.Bold = True
		        while (MyPic.Graphics.StringWidth(id) > max((totX/2),circlesize)) or (MyPic.Graphics.StringHeight(id,circlesize) > totY)
		          if textsize <1 then
		            exit
		          else
		            textsize = textsize -5
		          end
		          MyPic.Graphics.TextSize=textsize
		        wend
		        'msgbox(str(textsize))
		        If colorbarsHeight = 0 then
		          MyPic.Graphics.DrawString(id,(totX/2-(myPic.Graphics.StringWidth(id)/2)),(totY/2)+(MyPic.Graphics.StringHeight(id,totX)/3))
		        else
		          MyPic.Graphics.DrawString(id,(totX/2-(myPic.Graphics.StringWidth(id)/2)),(totY/2)-(colorbarsHeight/2)-3)
		        end
		        id = (str(totX) + "x" + str(totY))
		        MyPic.Graphics.TextSize=max((tileY/3),12)'font size is third of tileY or 12pixels min
		        MyPic.Graphics.Bold = False
		        MyPic.Graphics.DrawString(id,3,(totY-3))
		      else
		        id = (GridsList.cell(Index,6) + "     " +  str(totX) + "x" + str(totY))
		        MyPic.Graphics.TextSize=max((tileY/3),12)'font size is third of tileY or 12pixels min
		        
		        if (myPic.Graphics.StringWidth(id)) < totX then
		          MyPic.Graphics.DrawString(id,5,(totY-5))
		        else
		          id = (GridsList.cell(Index,6))
		          MyPic.Graphics.DrawString(id,(totX/2-(myPic.Graphics.StringWidth(id)/2)),(totY/2))
		          id = (str(totX) + "x" + str(totY))
		          MyPic.Graphics.DrawString(id,3,(totY-5))
		        end
		        
		      end
		      
		      
		    end
		    
		    
		  else
		    myPic.Graphics.ClearRect(0,0,1,1)
		  end
		  
		  
		  
		  rebuild=false
		  
		  
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub DeleteList()
		  if GridsList.listcount >1 Then
		    
		    if GridsList.ListIndex <> -1 then
		      if GridsList.ListIndex = 0 then
		        GridsList.removeRow(GridsList.ListIndex)
		      else
		        GridsList.Selected(GridsList.ListIndex-1) = True
		        GridsList.removeRow(GridsList.ListIndex+1)
		      end
		      UpdateScreen()
		    else
		      MsgBox("Please select grid to Delete")
		    end
		    
		  else
		    MsgBox("Must have one grid")
		  end
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub FitH()
		  if GorC = false then
		    
		    if canvas1.width <> scaledwidth then
		      
		      mscale = (canvas1.width/MyPic.width)*100
		      Window1.Canvas1.Refresh
		      
		      
		      
		    end
		    
		  else
		    if canvas1.width <> scaledwidth then
		      
		      mscale = (canvas1.width/OutCanvas.width)*100
		      Window1.Canvas1.Refresh
		      
		      
		      
		    end
		    
		    
		    
		  end
		  zoom.Text=str(round(mScale))+"%"
		  
		  
		  'if scaledWidth > Canvas1.width then
		  'while scaledWidth > Canvas1.width
		  'mscale = mscale -1
		  'Window1.Canvas1.Refresh
		  'wend
		  '
		  '
		  'elseif scaledWidth < Canvas1.width then
		  'while scaledWidth < Canvas1.width
		  'mscale = mscale +1
		  'Window1.Canvas1.Refresh
		  'wend
		  'end
		  '
		  'zoom.Text=str(mScale)+"%"
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub FitV()
		  if GorC = false then
		    
		    if canvas1.height <> scaledheight then
		      
		      mscale = (canvas1.height/MyPic.height)*100
		      Window1.Canvas1.Refresh
		      
		      
		      
		    end
		    
		  else
		    if canvas1.height <> scaledheight then
		      
		      mscale = (canvas1.height/OutCanvas.height)*100
		      Window1.Canvas1.Refresh
		      
		      
		      
		    end
		    
		    
		    
		  end
		  zoom.Text=str(round(mScale))+"%"
		  
		  '
		  'if scaledHeight > Canvas1.Height then
		  'while scaledHeight > Canvas1.Height
		  'mscale = mscale -1
		  'Window1.Canvas1.Refresh
		  'wend
		  '
		  '
		  'elseif scaledHeight < Canvas1.Height then
		  'while scaledHeight < Canvas1.Height
		  'mscale = mscale +1
		  'Window1.Canvas1.Refresh
		  'wend
		  'end
		  '
		  'zoom.Text=str(mScale)+"%"
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub LoadFile(f As FolderItem = Nil)
		  'debug.listbox1.InsertRow(0,"Load File")
		  
		  
		  
		  Dim file As FolderItem = f
		  dim tis as TextInputStream
		  dim s as string
		  dim i, j as integer
		  dim fields() as string
		  dim old_ver as Boolean = false
		  
		  
		  
		  If file Is Nil Then
		    'show standard file selector
		    file = GetOpenFolderItem(GridFileType.pg2)
		    if file=nil then exit sub             'cancel clicked
		  end if
		  'debug.listbox1.InsertRow(0,"Load File")
		  'UpdateScreen()
		  
		  If file <> Nil Then
		    'open the file
		    tis = TextInputStream.Open(file)
		    if tis=nil then                        'failed?
		      MsgBox("The file could not be opened.")
		      exit sub
		    end if
		    
		    'read file into grid
		    if not tis.EOF then
		      GridsList.DeleteAllRows
		      
		      s=tis.ReadLine                    'read line from file
		      fields=Split(s,",")                 'put items in fileds() array
		      'imports grid size and options
		      
		      if fields.Ubound < 9 then old_ver = true
		      For j  = 0 to fields.Ubound
		        Select Case j
		        Case 0
		          Window1.OutH.text = Trim(fields(0))
		        Case 1
		          Window1.OutV.text = Trim(fields(1))
		        Case 2
		          if Trim(fields(2)) = "True" then
		            Window1.stats.value = True
		          else
		            Window1.stats.value = False
		          end
		        Case 3
		          if Trim(fields(3)) = "True" then
		            Window1.originCursor.value = True
		          else
		            Window1.originCursor.value = False
		          end
		        Case 4
		          if Trim(fields(4)) = "True" then
		            Window1.alt_text.value = True
		          else
		            Window1.alt_text.value = False
		          end
		        Case 5
		          dim v as variant
		          v=val(Trim(fields(5)))
		          ColorPicker.FillColor=v.colorvalue
		        Case 6
		          if Trim(fields(6)) = "True" then
		            GridColour.value = True
		          else
		            GridColour.value = False
		          end
		        Case 7
		          CanvasText.text = Trim(fields(7))
		        Case 8
		          TP = val(Trim(fields(8)))
		          TextPos.ListIndex = val(Trim(fields(8)))
		        Case 9
		          
		          col_alpha.ListIndex = val(Trim(fields(9)))
		          
		        else
		          MsgBox("Too many parameters, possibly corrupt.") 
		        end select
		      next
		      
		      
		      
		    end
		    while not tis.EOF                    'while not end-of-file
		      GridsList.AddRow ""             'add row to grid
		      s=tis.ReadLine                    'read line from file
		      fields=Split(s,",")                 'put items in fields() array
		      if fields.Ubound < 15 then old_ver = true
		      For j  = 0 to fields.Ubound
		        Select Case j
		        Case 0,1,2,3,4,5,6
		          GridsList.Cell(GridsList.ListCount-1,j)=Trim(fields(j))
		        Case 7
		          GridsList.celltag(GridsList.LastIndex,7)=Trim(fields(7))
		        Case 8,9,10,11,12,13,14,15
		          If Trim(fields(j)) = "True" then
		            GridsList.cellcheck(GridsList.Lastindex,j) = True 
		          else
		            GridsList.cellcheck(GridsList.Lastindex,j) = False
		          end
		        else
		          MsgBox("Too many parameters, possibly corrupt.") 
		        end select
		      next
		      
		      'for i =0 to 6  'copy to grid
		      'GridsList.Cell(GridsList.ListCount-1,i)=Trim(fields(i))
		      'next
		      'GridsList.celltag(GridsList.LastIndex,7)=Trim(fields(7))
		      'for i=8 to 15
		      'If Trim(fields(i)) = "True" then
		      'GridsList.cellcheck(GridsList.Lastindex,i) = True 'Trim(fields(i))
		      'else
		      'GridsList.cellcheck(GridsList.Lastindex,i) = False
		      'end
		      'next
		    wend
		    
		    Window1.Title="Editor - " + file.Name
		    
		    tis.Close                                 'close file
		    
		    
		    
		    GorC = true
		    GridCanvas_select.Items(1).selected = True
		    Grid_Solo.Visible = true
		    MaskMode.Visible = true
		    
		    UpdateScreen()
		    
		    fitH()
		    
		    if old_ver = true then MsgBox("Possibly saved from an old version, please check and re-save")
		    
		  end if
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub OutCanvasUpdate()
		  'debug.listbox1.InsertRow(0,"OutCanvasUpdate")
		  
		  Dim d As SaveAsDialog
		  d = New SaveAsDialog
		  Dim id as String
		  dim i  as Integer
		  
		  OutCanvas= Self.BitmapForCaching(val(OutH.Text)/ScaleFactor, val(OutV.Text)/ScaleFactor)
		  
		  OutCanvas.VerticalResolution = 72
		  OutCanvas.HorizontalResolution = 72
		  
		  OutCanvas.Graphics.ScaleX = 1
		  OutCanvas.Graphics.ScaleY = 1
		  
		  
		  OutCanvas.Graphics.PenHeight = 1
		  OutCanvas.Graphics.PenWidth = 1
		  
		  
		  
		  Canvas1.Graphics.ForeColor = RGB(0, 0, 0)
		  
		  if Not Preferences.Tcanvas or MaskMode.value then 
		    OutCanvas.Graphics.FillRect(0,0,val(OutH.Text), val(OutV.Text))
		  end if
		  
		  if GridsList.ListIndex = -1 or Grid_Solo.value= false then
		    
		    for i = 0 to GridsList.Listcount-1
		      if MaskMode.value then
		        
		        dim gridwidth as integer = val(GridsList.cell(i,0))*val(GridsList.Cell(i,2))
		        dim gridheight as Integer = val(GridsList.cell(i,1))*val(GridsList.Cell(i,3))
		        OutCanvas.Graphics.ForeColor = RGB(0, 0, 0, 0)
		        
		        OutCanvas.graphics.ClearRect(val(GridsList.cell(i,4)), val(GridsList.cell(i,5)),gridwidth, gridheight)
		        'msgbox ("blank" + GridsList.cell(i,4) + GridsList.cell(i,5))
		        
		        
		      else
		        BuildGrid(i)
		        OutCanvas.Graphics.DrawPicture(myPic,val(GridsList.Cell(i,4)),val(GridsList.Cell(i,5)))
		      end
		      
		      Dim offX as double = val(GridsList.Cell(i,4))
		      Dim offY as double = val(GridsList.Cell(i,5))
		      
		      if Window1.originCursor.Value and not MaskMode.value then
		        'Display offset markers
		        OutCanvas.graphics.ForeColor = RGB(255,255,255)
		        OutCanvas.Graphics.DrawLine(offX, 0, OffX,OffY)
		        OutCanvas.Graphics.DrawLine((offX-5),(OffY-5),OffX,OffY)
		        OutCanvas.Graphics.DrawLine((offX-5),(OffY+5),OffX,OffY)
		        OutCanvas.Graphics.DrawLine((offX+5),(OffY-5),OffX,OffY)
		        
		        OutCanvas.Graphics.DrawLine(0, offY, OffX,OffY)
		        
		        'Display offset numbers
		        'OutCanvas.Graphics.TextSize=15
		        OutCanvas.Graphics.TextSize=min((val(GridsList.Cell(i,1))/5),15)
		        id = "TL:"+ GridsList.Cell(i,4) + "," + GridsList.Cell(i,5)
		        dim a as Integer = OutCanvas.Graphics.StringHeight(id,val(GridsList.Cell(i,0))*2)
		        OutCanvas.Graphics.DrawString(id,offX+5,offY+(a*2))
		      end
		      
		      
		    next
		  else
		    i = GridsList.ListIndex
		    
		    if MaskMode.value then
		      
		      dim gridwidth as integer = val(GridsList.cell(i,0))*val(GridsList.Cell(i,2))
		      dim gridheight as Integer = val(GridsList.cell(i,1))*val(GridsList.Cell(i,3))
		      OutCanvas.Graphics.ForeColor = RGB(0, 0, 0, 0)
		      
		      OutCanvas.graphics.ClearRect(val(GridsList.cell(i,4)), val(GridsList.cell(i,5)),gridwidth, gridheight)
		      'msgbox ("blank" + GridsList.cell(i,4) + GridsList.cell(i,5))
		      
		      
		    else
		      BuildGrid(i)
		      OutCanvas.Graphics.DrawPicture(myPic,val(GridsList.Cell(i,4)),val(GridsList.Cell(i,5)))
		    end
		    
		    
		    
		    Dim offX as double = val(GridsList.Cell(i,4))
		    Dim offY as double = val(GridsList.Cell(i,5))
		    
		    if Window1.originCursor.Value and not MaskMode.value then
		      'Display offset markers
		      OutCanvas.graphics.ForeColor = RGB(255,255,255)
		      OutCanvas.Graphics.DrawLine(offX, 0, OffX,OffY)
		      OutCanvas.Graphics.DrawLine((offX-5),(OffY-5),OffX,OffY)
		      OutCanvas.Graphics.DrawLine((offX-5),(OffY+5),OffX,OffY)
		      OutCanvas.Graphics.DrawLine((offX+5),(OffY-5),OffX,OffY)
		      OutCanvas.Graphics.DrawLine(0, offY, OffX,OffY)
		      
		      'Display offset numbers
		      OutCanvas.Graphics.TextSize=min((val(GridsList.Cell(i,1))/5),15)
		      id = "TL:"+ GridsList.Cell(i,4) + "," + GridsList.Cell(i,5)
		      dim a as Integer = OutCanvas.Graphics.StringHeight(id,val(GridsList.Cell(i,0))*2)
		      OutCanvas.Graphics.DrawString(id,offX+5,offY+(a*2))
		    end
		    
		    
		    
		  end
		  
		  
		  'Display canvas raster
		  if Window1.stats.Value and not MaskMode.value then
		    OutCanvas.Graphics.ForeColor  = &cffffff
		    OutCanvas.Graphics.DrawRect(0,0,val(OutH.Text), val(OutV.Text))
		  end
		  
		  
		  
		  if CanvasText.text <> "" and not MaskMode.value then
		    OutCanvas.Graphics.ForeColor  = &cffffff
		    OutCanvas.Graphics.TextSize=25
		    id = "Canvas  :"+OutH.text+"px x "+OutV.text+"px"+ chr(13) + CanvasText.Text
		    dim w as integer = OutCanvas.Graphics.Stringwidth(id)
		    dim h as Integer = OutCanvas.Graphics.StringHeight(id,w)
		    
		    Select Case TP
		    Case 0 'TL
		      TextXpos = 0
		      TextYpos = 0
		    Case 1 'TC
		      TextXpos = (OutCanvas.Width/2)-(w/2)-3
		      TextYpos = 0
		    Case 2 'TR
		      TextXpos = OutCanvas.Width-w-5
		      TextYpos = 0
		    Case 3 'BL
		      TextXpos = 0
		      TextYpos = OutCanvas.Height-h-5
		    Case 4 'BC
		      TextXpos = (OutCanvas.Width/2)-(w/2)-3
		      TextYpos = OutCanvas.Height-h-5
		    Case 5 'BR
		      TextXpos = OutCanvas.Width-w-5
		      TextYpos = OutCanvas.Height-h-5
		      
		    end select
		    
		    OutCanvas.Graphics.DrawString(id,TextXpos+5,TextYpos+25)
		    OutCanvas.Graphics.DrawRect(TextXpos,TextYpos,w+5,h+5)
		  end
		  
		  
		  
		  
		  BuildGrid(picindex) 'ensure last build grid is currently selected one from list.
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub SaveFile()
		  dim f as folderitem
		  dim tos as textOutputStream
		  dim s as string
		  dim i, j as integer
		  
		  'show standard file selector
		  f= GetSaveFolderItem(GridFileType.pg2,"Grid List "+CanvasText.text+".pg2")
		  if f = nil then exit sub                              'cancel clicked
		  
		  'create file
		  tos = f.CreateTextFile
		  if tos = nil then                                       'failed?
		    MsgBox("The file could not be created!")
		    exit sub
		  end if
		  
		  if GridsList.ListCount>0 then                   'if grid not empty
		    
		    s=Window1.OutH.Text+","+Window1.OutV.text+","+str(Window1.stats.Value)+","+str(Window1.originCursor.Value)+","+str(Window1.alt_text.Value)+"," +str(ColorPicker.FillColor)+"," +str(GridColour.Value)+"," + CanvasText.Text +","   + str(TP) + "," +str(col_alpha.ListIndex)+"," 'exports canvas size and options
		    tos.WriteLine s.left(s.len-1)                'save line
		    for i=0 to GridsList.ListCount-1            'for each row
		      s=""                                                   'build line to save
		      for j=0 to 6   'for each column
		        s=s+GridsList.Cell(i,j)+ ","    'csv
		      next
		      s=s+str(GridsList.celltag(i,7))+","
		      for j = 8 to 15
		        s=s+str(GridsList.cellcheck(i,j))+","
		      next
		      tos.WriteLine s.left(s.len-1)                'save line
		    next
		  end if
		  
		  Window1.Title="Editor - " + f.Name
		  
		  tos.Close                                                 'close file
		  
		  
		  
		  
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub UpdateScreen()
		  
		  if GridsList.ListCount>0 then
		    
		    rebuild=true
		    
		    
		    if GorC then
		      OutCanvasUpdate()
		      Window1.Canvas1.Refresh
		    else
		      Window1.Canvas1.Refresh
		      'OutCanvasUpdate()
		    end
		    
		    if OutputIsOpen  then
		      OutCanvasUpdate()
		      Window2.Canvas1.Refresh
		    end
		    
		  end
		End Sub
	#tag EndMethod


	#tag Property, Flags = &h0
		CanvasHmargin As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		CanvasVMargin As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		column As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		edit As Boolean = false
	#tag EndProperty

	#tag Property, Flags = &h0
		GorC As Boolean = false
	#tag EndProperty

	#tag Property, Flags = &h0
		icon As Picture
	#tag EndProperty

	#tag Property, Flags = &h0
		maxWinHeight As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		maxWinWidth As Integer
	#tag EndProperty

	#tag Property, Flags = &h21
		Private mHorizontalScrollBarLast As Integer
	#tag EndProperty

	#tag Property, Flags = &h21
		Private mOldX As Integer
	#tag EndProperty

	#tag Property, Flags = &h21
		Private mOldY As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		mScale As Double = 54
	#tag EndProperty

	#tag Property, Flags = &h21
		Private mVerticalScrollBarLast As Integer
	#tag EndProperty

	#tag Property, Flags = &h21
		Private mXScroll As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		myPic As Picture
	#tag EndProperty

	#tag Property, Flags = &h21
		Private mYScroll As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		OutCanvas As Picture
	#tag EndProperty

	#tag Property, Flags = &h0
		OutputIsOpen As Boolean = false
	#tag EndProperty

	#tag Property, Flags = &h0
		PicIndex As Integer = 0
	#tag EndProperty

	#tag Property, Flags = &h0
		rebuild As Boolean = false
	#tag EndProperty

	#tag Property, Flags = &h0
		row As Integer
	#tag EndProperty

	#tag Property, Flags = &h21
		Private scaledHeight As Integer = 1
	#tag EndProperty

	#tag Property, Flags = &h21
		Private scaledWidth As Integer = 1
	#tag EndProperty

	#tag Property, Flags = &h21
		Private TextXPos As Integer = 0
	#tag EndProperty

	#tag Property, Flags = &h21
		Private TextYPos As Integer = 0
	#tag EndProperty

	#tag Property, Flags = &h0
		TP As Integer = 0
	#tag EndProperty

	#tag Property, Flags = &h21
		Private Untitled As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		withGrids As Boolean = false
	#tag EndProperty


	#tag Constant, Name = AE1, Type = String, Dynamic = False, Default = \"{\n  // Script generated from PiXL Grid Multi\n  // www.pixlevolution.com/\n  // Create script undo group\n\n  app.beginUndoGroup(\"Create Grids\");\n\n  // create project if necessary\n\n  var proj \x3D app.project;\n  if(!proj) proj \x3D app.newProject();\n\n  //Canvas\n\n  var compW \x3D ", Scope = Public
	#tag EndConstant

	#tag Constant, Name = AE1a, Type = String, Dynamic = False, Default = \"; // comp height\n  var compL \x3D ", Scope = Public
	#tag EndConstant

	#tag Constant, Name = AE1b, Type = String, Dynamic = False, Default = \";  // comp length (seconds)\n  var compRate \x3D ", Scope = Public
	#tag EndConstant

	#tag Constant, Name = AE2, Type = String, Dynamic = False, Default = \"; // comp frame rate\n  var compBG \x3D [48/255\x2C63/255\x2C84/255] // comp background color\n  \n  var myItemCollection \x3D app.project.items;\n  var canvas \x3D myItemCollection.addComp(\'", Scope = Public
	#tag EndConstant

	#tag Constant, Name = AE2a, Type = String, Dynamic = False, Default = \"\'\x2CcompW\x2CcompH\x2C1\x2CcompL\x2CcompRate);\n  canvas.bgColor \x3D compBG;", Scope = Public
	#tag EndConstant

	#tag Constant, Name = AE3, Type = String, Dynamic = False, Default = \"; // comp height\n\n  \n  \n  var myItemCollection \x3D app.project.items;\n  var grid \x3D myItemCollection.addComp(\'", Scope = Public
	#tag EndConstant

	#tag Constant, Name = AE3a, Type = String, Dynamic = False, Default = \"\'\x2CcompW\x2CcompH\x2C1\x2CcompL\x2CcompRate);\n  \n  var backgroundLayer \x3D grid.layers.addSolid([", Scope = Public
	#tag EndConstant

	#tag Constant, Name = AE3b, Type = String, Dynamic = False, Default = \"]\x2C \"Background\"\x2C compW\x2C compH\x2C 1);", Scope = Public
	#tag EndConstant

	#tag Constant, Name = AE3c, Type = String, Dynamic = False, Default = \"  var gridimport \x3D app.project.importFile(new ImportOptions(new File(\"", Scope = Public
	#tag EndConstant

	#tag Constant, Name = AE3d, Type = String, Dynamic = False, Default = \"\")));\n  var gridlayer \x3D grid.layers.add(gridimport);", Scope = Public
	#tag EndConstant

	#tag Constant, Name = AE3e, Type = String, Dynamic = False, Default = \"  var mylayer \x3D canvas.layers.add(grid);\n  var myPosition \x3D mylayer.property(\"position\");\n  var myAnchor \x3D mylayer.property(\"anchorPoint\");\n  myAnchor.setValue([0\x2C0]);\n  myPosition.setValue([", Scope = Public
	#tag EndConstant


#tag EndWindowCode

#tag Events Canvas1
	#tag Event
		Sub Paint(g As Graphics, areas() As REALbasic.Rect)
		  'debug.listbox1.InsertRow(0,"Paint "+ str(rebuild))
		  
		  if rebuild then
		    BuildGrid(PicIndex)
		  end
		  
		  if GorC = false then
		    scaledWidth  = MyPic.width * (mscale/100)
		    scaledHeight = MyPic.height * (mscale/100)
		    
		    '// Size the scrollbar based on how much vertical scrolling the image can do
		    VerticalScrollBar.Maximum = scaledHeight - me.Height
		    '
		    // Disable scrollbar if image is shorter than canvas area since there
		    // is nothing to scroll
		    If me.Height >= scaledHeight Then
		      VerticalScrollBar.Visible = False
		      mYScroll = 0
		    Else
		      'check if ScrollBar is visible already. If just appearing then reset mYScroll
		      
		      if VerticalScrollBar.Visible then
		        
		      else
		        VerticalScrollBar.Visible = True
		        mYScroll = 0
		      end
		      
		    End If
		    '
		    '// Size the scrollbar based on how much horizontal scrolling the image can do
		    HorizontalScrollBar.Maximum = scaledWidth - me.Width
		    '
		    // Disable scrollbar if image is narrower than canvas area since there
		    // is nothing to scroll
		    If me.Width >= scaledWidth Then
		      HorizontalScrollBar.Visible = False 
		      mXScroll = 0
		    Else
		      
		      'check if ScrollBar is visible already. If just appearing then reset mXScroll
		      
		      if HorizontalScrollBar.Visible then
		        
		      else
		        HorizontalScrollBar.Visible = True
		        
		        mXScroll = 0
		      end
		      
		    End If
		    
		    
		    
		    g.DrawPicture(MyPic, mXScroll, mYScroll,scaledWidth,scaledHeight,0,0,MyPic.width,MyPic.height)
		    
		    
		  else
		    scaledWidth  = OutCanvas.width * (mscale/100)
		    scaledHeight = OutCanvas.height * (mscale/100)
		    
		    '// Size the scrollbar based on how much vertical scrolling the image can do
		    VerticalScrollBar.Maximum = scaledHeight - me.Height
		    '
		    // Disable scrollbar if image is shorter than canvas area since there
		    // is nothing to scroll
		    If me.Height >= scaledHeight Then
		      VerticalScrollBar.Visible = False
		      mYScroll = 0
		    Else
		      'check if ScrollBar is visible already. If just appearing then reset mYScroll
		      
		      if VerticalScrollBar.Visible then
		      else
		        VerticalScrollBar.Visible = True
		        mYScroll = 0
		      end
		      
		    End If
		    '
		    '// Size the scrollbar based on how much horizontal scrolling the image can do
		    HorizontalScrollBar.Maximum = scaledWidth - me.Width
		    '
		    // Disable scrollbar if image is narrower than canvas area since there
		    // is nothing to scroll
		    
		    
		    If me.Width >= scaledWidth Then
		      HorizontalScrollBar.Visible = False 
		      mXScroll = 0
		    Else
		      
		      'check if ScrollBar is visible already. If just appearing then reset mXScroll
		      
		      if HorizontalScrollBar.Visible then
		      else
		        HorizontalScrollBar.Visible = True
		        mXScroll = 0
		      end
		      
		    End If
		    
		    
		    
		    g.DrawPicture(OutCanvas, mXScroll, mYScroll,scaledWidth,scaledHeight,0,0,OutCanvas.width,OutCanvas.height)
		    
		    
		  end 
		  
		  
		End Sub
	#tag EndEvent
	#tag Event
		Sub MouseDrag(X As Integer, Y As Integer)
		  'if canvas then
		  'if X > left of title and < left + width of title then
		  'if Y > top of title and < top + height of title then
		  'titleX = X
		  'end if
		  
		  'end if 
		  
		  'else
		  
		  If X <> mOldX Or y <> mOldY Then
		    // If the mouse has been moved, calculate the delta
		    // and scroll the image.
		    
		    Dim dx As Integer = X - mOldX
		    Dim dy As Integer = Y - mOldY
		    
		    // Only allow image to be scrolled right and down
		    If HorizontalScrollBar.Value - dx < 0 Then Return
		    If VerticalScrollBar.Value - dy < 0 Then Return
		    
		    // Don't allow image to be scrolled beyond its size
		    If HorizontalScrollBar.Value - dx > HorizontalScrollBar.Maximum Then Return
		    If VerticalScrollBar.Value - dx > VerticalScrollBar.Maximum Then Return
		    
		    // Adjust scrollbars which will scroll image 
		    HorizontalScrollBar.Value = HorizontalScrollBar.Value - dx
		    VerticalScrollBar.Value = VerticalScrollBar.Value - dy
		    
		    mOldX = X
		    mOldY = Y
		    
		  End If
		  
		  
		  'end if
		End Sub
	#tag EndEvent
	#tag Event
		Function MouseDown(X As Integer, Y As Integer) As Boolean
		  // Save the last mouse coordinates so we can
		  // calculate if the mouse has moved.
		  
		  mOldX = X
		  mOldY = Y
		  
		  Return True
		End Function
	#tag EndEvent
	#tag Event
		Function MouseWheel(X As Integer, Y As Integer, deltaX as Integer, deltaY as Integer) As Boolean
		  
		  // If the mousewheel is moved over the Canvas, then
		  // use the delta to adjust the scrollbars, which
		  // scrolls the image.
		  
		  VerticalScrollBar.Value = VerticalScrollBar.Value + deltaY
		  HorizontalScrollBar.Value = HorizontalScrollBar.Value +deltaX
		End Function
	#tag EndEvent
	#tag Event
		Function KeyDown(Key As String) As Boolean
		  Const kLeftArrow = 28
		  Const kRightArrow = 29
		  Const kUpArrow = 30
		  Const kDownArrow = 31
		  Const kScrollUnit = 8 // pixels to scroll per keypress
		  
		  
		  // Move the scrollbar based on the key that was pressed
		  Select Case Asc(Key)
		  Case kLeftArrow
		    HorizontalScrollBar.Value = HorizontalScrollBar.Value - kScrollUnit
		    
		  Case kRightArrow
		    HorizontalScrollBar.Value = HorizontalScrollBar.Value + kScrollUnit
		    
		  Case kUpArrow
		    VerticalScrollBar.Value = VerticalScrollBar.Value - kScrollUnit
		    
		  Case kDownArrow
		    VerticalScrollBar.Value = VerticalScrollBar.Value + kScrollUnit
		    
		    
		    
		  End Select
		  
		  Return True
		  
		End Function
	#tag EndEvent
	#tag Event
		Sub Open()
		  
		  #If TargetWin32 Then
		    Me.DoubleBuffer = True
		  #Else
		    Me.DoubleBuffer = False
		  #Endif
		  Me.EraseBackground = False
		  
		  
		  
		  
		End Sub
	#tag EndEvent
#tag EndEvents
#tag Events VerticalScrollBar
	#tag Event
		Sub ValueChanged()
		  // Calculate the delta that the scrollbar was
		  // moved and scroll the image accordingly.
		  
		  Dim delta As Integer
		  delta = mVerticalScrollBarLast - Me.Value
		  mYScroll = mYScroll + delta
		  
		  Canvas1.Scroll(0, delta)
		  
		  mVerticalScrollBarLast = Me.Value
		End Sub
	#tag EndEvent
	#tag Event
		Function MouseWheel(X As Integer, Y As Integer, deltaX as Integer, deltaY as Integer) As Boolean
		  // If the mouse wheel is moved, adjust the scrollbar
		  // by the delta.
		  
		  Me.Value = Me.Value + deltaY
		  
		  Return True
		End Function
	#tag EndEvent
#tag EndEvents
#tag Events HorizontalScrollBar
	#tag Event
		Sub ValueChanged()
		  'debug.listbox1.InsertRow("H delta")
		  // Calculate the delta that the scrollbar was
		  // moved and scroll the image accordingly.
		  
		  Dim delta As Integer
		  delta = mHorizontalScrollBarLast - Me.Value
		  mXScroll = mXScroll + delta
		  
		  Canvas1.Scroll(delta, 0)
		  
		  mHorizontalScrollBarLast = Me.Value
		  
		  
		End Sub
	#tag EndEvent
#tag EndEvents
#tag Events Scale
	#tag Event
		Sub Down()
		  dim a as integer
		  
		  a = mscale\5
		  mscale = a *5
		  
		  
		  mScale = mScale-5
		  
		  if mScale <5 then mScale=5
		  rebuild=false
		  
		  Window1.Canvas1.Refresh
		  
		  zoom.Text=str(mScale)+"%"
		End Sub
	#tag EndEvent
	#tag Event
		Sub Up()
		  dim a as integer
		  
		  a = mscale\5
		  mscale = a *5
		  
		  
		  mScale = mScale+5
		  rebuild=false
		  'UpdateScreen()
		  Window1.Canvas1.Refresh
		  
		  zoom.Text=str(mScale)+"%"
		End Sub
	#tag EndEvent
#tag EndEvents
#tag Events OutH
	#tag Event
		Sub LostFocus()
		  if val(me.Text) > 32767 then
		    MsgBox("Too Big!")
		    me.Text = str(32767)
		    
		  elseif val(me.text) <1 then
		    MsgBox("Too Small")
		    me.Text = "1"
		    
		    
		  end
		  
		  
		  UpdateScreen()
		End Sub
	#tag EndEvent
#tag EndEvents
#tag Events OutV
	#tag Event
		Sub LostFocus()
		  if val(me.Text) > 32767 then
		    MsgBox("Too Big!")
		    me.Text = str(32767)
		    
		  elseif val(me.text) <1 then
		    MsgBox("Too Small")
		    me.Text = "1"
		    
		    
		  end
		  UpdateScreen()
		End Sub
	#tag EndEvent
#tag EndEvents
#tag Events stats
	#tag Event
		Sub Action()
		  UpdateScreen()
		End Sub
	#tag EndEvent
#tag EndEvents
#tag Events Hscroll
	#tag Event
		Sub Action()
		  Window1.Canvas1.Refresh
		End Sub
	#tag EndEvent
#tag EndEvents
#tag Events Vscroll
	#tag Event
		Sub Action()
		  Window1.Canvas1.Refresh
		End Sub
	#tag EndEvent
#tag EndEvents
#tag Events SpeedSlide
	#tag Event
		Sub ValueChanged()
		  
		End Sub
	#tag EndEvent
#tag EndEvents
#tag Events Live
	#tag Event
		Sub Action()
		  if OutputIsOpen then
		    window2.close
		  else
		    
		    Window2.show
		  end
		End Sub
	#tag EndEvent
#tag EndEvents
#tag Events SizeSlide
	#tag Event
		Sub ValueChanged()
		  
		End Sub
	#tag EndEvent
#tag EndEvents
#tag Events CursorColour
	#tag Event
		Sub Action()
		  Window1.Canvas1.Refresh
		End Sub
	#tag EndEvent
#tag EndEvents
#tag Events AddGrid
	#tag Event
		Sub Action()
		  dim previousList as integer
		  
		  if GridsList.Listindex <> -1 then
		    previousList = GridsList.ListIndex
		    GridsList.AddRow()
		    for i as integer = 0 to 6
		      GridsList.cell(GridsList.Lastindex,i)=GridsList.cell(previousList,i)
		    next
		    GridsList.celltag(GridsList.Lastindex,7)=GridsList.celltag(previousList,7)
		    for i as integer = 8 to 15
		      GridsList.cellcheck(GridsList.Lastindex,i)=GridsList.cellcheck(previousList,i)
		    next
		    
		    
		  else
		    
		    
		    GridsList.AddRow()
		    for i as integer = 0 to 6
		      GridsList.cell(GridsList.Lastindex,i)=GridsList.cell((GridsList.Lastindex-1),i)
		    next
		    GridsList.celltag(GridsList.Lastindex,7)=GridsList.celltag((GridsList.Lastindex-1),7)
		    for i as integer = 8 to 15
		      GridsList.cellcheck(GridsList.Lastindex,i)=GridsList.cellcheck((GridsList.Lastindex-1),i)
		    next
		    
		  end
		  UpdateScreen()
		  
		  
		  
		  
		  
		End Sub
	#tag EndEvent
#tag EndEvents
#tag Events GridsList
	#tag Event
		Sub Open()
		  dim i as integer
		  
		  
		  Dim values() As String = Array("80","60","16","12","320","180","Screen One") 'startup values
		  Me.AddRow(values)
		  
		  me.Celltag(0,7)="25% Colour"
		  
		  for i = 0 to 7
		    Me.ColumnType(2) = ListBox.TypeEditableTextField
		  next
		  
		  for i = 8 to 15   
		    Me.ColumnType(i) = ListBox.TypeCheckbox
		    me.CellCheck(0,i)=true
		  next
		  
		  
		  
		End Sub
	#tag EndEvent
	#tag Event
		Function CellClick(row as Integer, column as Integer, x as Integer, y as Integer) As Boolean
		  'MsgBox("Cell Click")
		  'UpdateScreen()
		  'if edit then
		  'Me.EditCell(row, column)
		  'edit = false
		  'end
		  
		  self.row = row
		  self.column = Column
		  
		End Function
	#tag EndEvent
	#tag Event
		Sub Change()
		  
		  if me.ListIndex <> -1 then
		    PicIndex=me.ListIndex
		    SaveAsGrid.Caption="Save Grid As.."
		    SaveAsCanvas.Caption="Save Canvas As.."
		    AddGrid.Caption = "Copy Grid.."
		    deselect.Visible = true
		  else
		    AddGrid.Caption = "Add Grid.."
		    SaveAsGrid.Caption="Save All Grids As.."
		    
		    if Grid_Solo.value then
		      SaveAsCanvas.Caption="Save Canvas As.."
		    end
		    deselect.Visible = false
		    
		  end
		  
		  UpdateScreen()
		  
		  
		  
		End Sub
	#tag EndEvent
	#tag Event
		Sub DoubleClick()
		  
		  if column <8 then
		    Me.EditCell(row, column)
		    
		  end
		  
		  
		End Sub
	#tag EndEvent
	#tag Event
		Function CellBackgroundPaint(g As Graphics, row As Integer, column As Integer) As Boolean
		  '// Highlight ever other row
		  '
		  If row Mod 2 = 0 Then
		    g.ForeColor = &cf3f6fA
		    g.FillRect(0, 0, g.Width, g.Height)
		  End If
		End Function
	#tag EndEvent
	#tag Event
		Sub MouseUp(x As Integer, y As Integer)
		  Dim row As Integer = Me.RowFromXY(x, y)
		  Dim col As Integer = Me.ColumnFromXY(x, y)
		  
		  If col = 7 Then
		    Me.ListIndex = row
		    Me.Selected(row) = True
		    
		    Dim base As New MenuItem
		    base.Append(New MenuItem("100% Colour"))
		    base.Append(New MenuItem("50% Colour"))
		    base.Append(New MenuItem("25% Colour"))
		    base.Append(New MenuItem("White"))
		    base.Append(New MenuItem("Black"))
		    base.Append(New MenuItem("Grayscale V"))
		    base.Append(New MenuItem("Grayscale H"))
		    base.Append(New MenuItem("Light Gray/Dark Gray"))
		    base.Append(New MenuItem("Reduced/Full Check"))
		    base.Append(New MenuItem("Black/White"))
		    base.Append(New MenuItem("Transparent"))
		    base.Append(New MenuItem("Red/Gray"))
		    base.Append(New MenuItem("Alt Red"))
		    base.Append(New MenuItem("Full Red"))
		    base.Append(New MenuItem("Green/Gray"))
		    base.Append(New MenuItem("Alt Green"))
		    base.Append(New MenuItem("Full Green"))
		    base.Append(New MenuItem("Blue/Gray"))
		    base.Append(New MenuItem("Alt Blue"))
		    base.Append(New MenuItem("Full Blue"))
		    base.Append(New MenuItem("Yellow/Gray"))
		    base.Append(New MenuItem("Orange/Gray"))
		    base.Append(New MenuItem("Aqua/Gray"))
		    base.Append(New MenuItem("Purple/Gray"))
		    base.Append(New MenuItem("Red/Green"))
		    base.Append(New MenuItem("Green/Blue"))
		    base.Append(New MenuItem("Blue/Red"))
		    base.Append(New MenuItem("Rainbow"))
		    base.Append(New MenuItem("Fruit"))
		    
		    Dim selectedMenu As MenuItem
		    selectedMenu = base.PopUp
		    
		    If selectedMenu <> Nil Then
		      // CellTextPaint will check for a value in the CellTag
		      // and display it.
		      Me.CellTag(row, col) = selectedMenu.Text
		      
		      UpdateScreen()
		      Me.InvalidateCell(row, 7)
		    End If
		  End If
		  
		  
		  
		  
		  
		  
		  
		  
		End Sub
	#tag EndEvent
	#tag Event
		Function MouseDown(x As Integer, y As Integer) As Boolean
		  If Me.ColumnFromXY(x, y) = 7 Then
		    Return True
		  End If
		End Function
	#tag EndEvent
	#tag Event
		Function CellTextPaint(g As Graphics, row As Integer, column As Integer, x as Integer, y as Integer) As Boolean
		  
		  Select Case column
		  Case 7 // PopupMenu
		    // Draw an arrow to indicate that clicking this field will
		    // display a menu
		    g.ForeColor = &c000000
		    
		    // Points for a triangle on the right side of the cell
		    Dim points(6) As Integer
		    points(1) = g.Width - 10
		    points(2) = 1
		    points(3) = g.Width
		    points(4) = 1
		    points(5) = g.Width - 5
		    points(6) = 10
		    
		    g.FillPolygon(points)
		    
		    If Me.CellTag(row, column) <> "" Then
		      g.DrawString(Me.CellTag(row, column), x, y)
		    Else
		      g.DrawString("25% Colour", x, y)
		    End If
		    
		    Return True
		  end select
		End Function
	#tag EndEvent
	#tag Event
		Sub CellAction(row As Integer, column As Integer)
		  
		  select case column
		    
		  case 0
		    if (val(GridsList.cell(row,0))*val(GridsList.cell(row,2))) >  32767 then
		      MsgBox("Too Big!")
		      GridsList.cell(row,0) = str((32767\val(GridsList.cell(row,2)))-1)
		    elseif (val(GridsList.cell(row,0))) <1 then
		      GridsList.cell(row,0) = "1"
		      MsgBox("Too Small")
		    end 
		  case 1
		    if (val(GridsList.cell(row,1))*val(GridsList.cell(row,3))) >  32767 then
		      MsgBox("Too Big!")
		      GridsList.cell(row,1) = str((32767\val(GridsList.cell(row,3)))-1)
		    elseif (val(GridsList.cell(row,1))) <1 then
		      MsgBox("Too Small")
		      GridsList.cell(row,1) = "1"
		    end 
		    
		  case 2
		    if (val(GridsList.cell(row,0))*val(GridsList.cell(row,2))) >  32767 then
		      MsgBox("Too Big!")
		      GridsList.cell(row,2) = str((32767\val(GridsList.cell(row,0)))-1)
		    elseif (val(GridsList.cell(row,2))) <1 then
		      MsgBox("Too Small")
		      GridsList.cell(row,2) = "1"
		    end if
		    
		  case 3
		    if (val(GridsList.cell(row,1))*val(GridsList.cell(row,3))) >  32767 then
		      MsgBox("Too Big!")
		      GridsList.cell(row,3) = str((32767\val(GridsList.cell(row,1)))-1)
		    elseif (val(GridsList.cell(row,3))) <1 then
		      MsgBox("Too Small")
		      GridsList.cell(row,3) = "1"
		    end if
		    
		  else
		    UpdateScreen()
		    'If Me.CellCheck(row, column) Then
		    'UpdateScreen()
		    'Else
		    'UpdateScreen()
		    'End If
		  end select
		  me.Refresh
		  
		  
		End Sub
	#tag EndEvent
	#tag Event
		Function CellKeyDown(row as Integer, column as Integer, key as String) As Boolean
		  if Keyboard.ShiftKey = false and asc(key) = 9 then
		    // here you find the next cell to make editable, and use editCell on it
		    
		    if column <6 then
		      me.EditCell(row, column+1)
		      return true
		    end
		  elseif  Keyboard.ShiftKey  and asc(key) = 9 Then
		    if column <6  and column > 0 then
		      me.EditCell(row, column-1)
		      return true
		    end
		    
		  elseif asc(key) = 13 then
		    if Keyboard.AsyncShiftKey then
		      if row > 0 then
		        me.editcell(row - 1, column)
		        return true
		      end if
		    else
		      if row < me.ListCount - 1 then
		        me.editcell(row + 1, column)
		        return true
		      end if
		    end if
		  else
		    return false
		  end if
		  
		  
		  
		  
		  
		End Function
	#tag EndEvent
	#tag Event
		Function KeyDown(Key As String) As Boolean
		  if asc(key) =8 or asc(key) = 127 then
		    DeleteList()
		    return true
		  end
		  
		  return false
		End Function
	#tag EndEvent
#tag EndEvents
#tag Events DeleteGrid
	#tag Event
		Sub Action()
		  DeleteList()
		  
		  
		  'if GridsList.listcount >1 Then
		  '
		  'if GridsList.ListIndex <> -1 then
		  'if GridsList.ListIndex = 0 then
		  'GridsList.removeRow(GridsList.ListIndex)
		  'else
		  'GridsList.Selected(GridsList.ListIndex-1) = True
		  'GridsList.removeRow(GridsList.ListIndex+1)
		  'end
		  'UpdateScreen()
		  'else
		  'MsgBox("Please select grid to Delete")
		  'end
		  '
		  'else
		  'MsgBox("Must have one grid")
		  'end
		  
		  
		  
		End Sub
	#tag EndEvent
#tag EndEvents
#tag Events GridCanvas_select
	#tag Event
		Sub Action(itemIndex as integer)
		  If itemIndex = 0 Then
		    GorC = false
		    Grid_Solo.Visible = false
		    MaskMode.Visible = false
		    stats.Visible = false
		    originCursor.Visible = false
		    T_Canvas.Visible = false
		    TextPos.Visible = false
		    'CanvasText.Visible = false
		    
		    'CanvasTextXpos.Visible=false
		    'CanvasTextYpos.Visible=false
		  Else
		    GorC = true
		    Grid_Solo.Visible = true
		    MaskMode.Visible = true
		    stats.Visible = true
		    originCursor.Visible = true
		    T_Canvas.Visible = true
		    TextPos.Visible = true
		    T_Canvas.value = Preferences.Tcanvas
		    'CanvasText.Visible = true
		    
		    'CanvasTextXpos.Visible=true
		    'CanvasTextYpos.Visible=true
		    OutCanvasUpdate()
		  End If
		  UpdateScreen()
		  
		End Sub
	#tag EndEvent
#tag EndEvents
#tag Events originCursor
	#tag Event
		Sub Action()
		  UpdateScreen()
		End Sub
	#tag EndEvent
#tag EndEvents
#tag Events SaveList
	#tag Event
		Sub Action()
		  SaveFile()
		  
		  
		  'dim f as folderitem
		  'dim tos as textOutputStream
		  'dim s as string
		  'dim i, j as integer
		  '
		  ''show standard file selector
		  'f= GetSaveFolderItem(GridFileType.pg2,"Grid List"+".pg2")
		  'if f = nil then exit sub                              'cancel clicked
		  '
		  ''create file
		  'tos = f.CreateTextFile
		  'if tos = nil then                                       'failed?
		  'MsgBox("The file could not be created!")
		  'exit sub
		  'end if
		  '
		  'if GridsList.ListCount>0 then                   'if grid not empty
		  '
		  's=Window1.OutH.Text+","+Window1.OutV.text+","+str(Window1.stats.Value)+","+str(Window1.originCursor.Value)+","+str(Window1.alt_text.Value)+"," +str(ColorPicker.FillColor)+","        'exports canvas size and options
		  'tos.WriteLine s.left(s.len-1)                'save line
		  'for i=0 to GridsList.ListCount-1            'for each row
		  's=""                                                   'build line to save
		  'for j=0 to 6   'for each column
		  's=s+GridsList.Cell(i,j)+ ","    'csv
		  'next
		  's=s+str(GridsList.celltag(i,7))+","
		  'for j = 8 to 15
		  's=s+str(GridsList.cellcheck(i,j))+","
		  'next
		  'tos.WriteLine s.left(s.len-1)                'save line
		  'next
		  'end if
		  '
		  'tos.Close                                                 'close file
		  '
		  '
		  '
		  '
		  
		End Sub
	#tag EndEvent
#tag EndEvents
#tag Events LoadList
	#tag Event
		Sub Action()
		  LoadFile
		  
		End Sub
	#tag EndEvent
#tag EndEvents
#tag Events alt_text
	#tag Event
		Sub Action()
		  UpdateScreen()
		End Sub
	#tag EndEvent
#tag EndEvents
#tag Events SaveAsCanvas
	#tag Event
		Sub Action()
		  Dim f As FolderItem
		  OutCanvasUpdate()
		  if Grid_Solo.value and GridsList.ListIndex <> -1 then
		    f = GetSaveFolderItem(ImageFileTypeSet.Png, ("Canvas-" +CanvasText.text+" "+GridsList.cell(GridsList.ListIndex,6)+"-"+str(OutCanvas.Width) + "x" +str(OutCanvas.Height) +".png"))
		  elseif Grid_Solo.value = false and MaskMode.value then
		    
		    f = GetSaveFolderItem(ImageFileTypeSet.Png, ("Canvas-Mask-" +CanvasText.text+" "+str(OutCanvas.Width) + "x" +str(OutCanvas.Height) +".png"))
		    
		  else
		    f = GetSaveFolderItem(ImageFileTypeSet.Png, ("Canvas-" +CanvasText.text+" "+str(OutCanvas.Width) + "x" +str(OutCanvas.Height) +".png"))
		  end
		  
		  If f <> Nil Then
		    OutCanvas.Save(f, Picture.SaveAsPNG)
		  End If
		  
		  
		  
		  
		  
		  
		End Sub
	#tag EndEvent
#tag EndEvents
#tag Events SaveAsGrid
	#tag Event
		Sub Action()
		  Dim f As FolderItem
		  Dim d As SaveAsDialog
		  d = New SaveAsDialog
		  dim outpic as Picture
		  
		  'outpic= Self.BitmapForCaching(myPic.Width/4, myPic.Height/4)
		  'outpic.HorizontalResolution = 72
		  'outpic.VerticalResolution = 72
		  
		  if GridsList.ListIndex <> -1 then
		    
		    BuildGrid(PicIndex)
		    
		    
		    'outpic.Graphics.DrawPicture(myPic,0,0,(myPic.width),(myPic.Height),0,0,myPic.width,myPic.height)
		    
		    f = GetSaveFolderItem(ImageFileTypeSet.Png, ("Grid-" +GridsList.Cell(PicIndex,6) + "-"+str(mypic.Width) + "x" +str(mypic.Height) +".png"))
		    
		    
		    If f <> Nil Then
		      mypic.Save(f, Picture.SaveAsPNG)
		    End If
		  else
		    
		    for i as integer = 0 to GridsList.ListCount-1
		      PicIndex = i
		      BuildGrid(PicIndex)
		      'outpic.Graphics.DrawPicture(myPic,0,0,(myPic.width),(myPic.Height),0,0,myPic.width,myPic.height)
		      f = GetSaveFolderItem(ImageFileTypeSet.Png, ("Grid-" +GridsList.Cell(i,6) + "-"+str(myPic.Width) + "x" +str(myPic.Height) +".png"))
		      If f <> Nil Then
		        mypic.Save(f, Picture.SaveAsPNG)
		      End If
		      
		    next
		  end
		  
		End Sub
	#tag EndEvent
#tag EndEvents
#tag Events Grid_Solo
	#tag Event
		Sub Action()
		  
		  UpdateScreen()
		End Sub
	#tag EndEvent
#tag EndEvents
#tag Events ColorPicker
	#tag Event
		Sub MouseUp(X As Integer, Y As Integer)
		  Dim c  as Color
		  Dim b as Boolean
		  c = ColorPicker.FillColor
		  'c=CMY(.35,.9,.6) //choose the default color shown in color picker
		  b=SelectColor(c,"Select a Color")
		  ColorPicker.FillColor=c
		  
		  UpdateScreen()
		  
		  
		  
		End Sub
	#tag EndEvent
	#tag Event
		Function MouseDown(X As Integer, Y As Integer) As Boolean
		  
		  return true
		End Function
	#tag EndEvent
#tag EndEvents
#tag Events GridColour
	#tag Event
		Sub Action()
		  UpdateScreen()
		End Sub
	#tag EndEvent
#tag EndEvents
#tag Events CanvasText
	#tag Event
		Function KeyDown(Key As String) As Boolean
		  if asc(key) = 13 or asc(key) = 9 then
		    UpdateScreen()
		  else
		    return false
		  end
		  
		End Function
	#tag EndEvent
#tag EndEvents
#tag Events TextPos
	#tag Event
		Sub Change()
		  TP = me.ListIndex
		  UpdateScreen()
		End Sub
	#tag EndEvent
#tag EndEvents
#tag Events MaskMode
	#tag Event
		Sub Action()
		  UpdateScreen()
		End Sub
	#tag EndEvent
#tag EndEvents
#tag Events SaveList1
	#tag Event
		Sub Action()
		  
		  Dim n As Integer
		  n = MsgBox("Would you like to generate a script with the grids included?"+EndOfLine +EndOfLine +"Please ensure you have exported all the grids to the same folder as the script", 36)
		  If n = 6 Then
		    withGrids = true
		  ElseIf n = 7 Then
		    withGrids = false
		  End If
		  
		  
		  AEexport()
		  
		End Sub
	#tag EndEvent
#tag EndEvents
#tag Events FitV_button
	#tag Event
		Sub Action()
		  FitV()
		End Sub
	#tag EndEvent
#tag EndEvents
#tag Events FitH_button
	#tag Event
		Sub Action()
		  FitH()
		End Sub
	#tag EndEvent
#tag EndEvents
#tag Events OnetoOneButton
	#tag Event
		Sub Action()
		  mScale=100
		  Window1.Canvas1.Refresh
		  zoom.Text=str(mScale)+"%"
		End Sub
	#tag EndEvent
#tag EndEvents
#tag Events col_alpha
	#tag Event
		Sub Change()
		  UpdateScreen()
		End Sub
	#tag EndEvent
#tag EndEvents
#tag Events T_Canvas
	#tag Event
		Sub Action()
		  Preferences.Tcanvas = me.value
		  
		  UpdateScreen()
		End Sub
	#tag EndEvent
#tag EndEvents
#tag ViewBehavior
	#tag ViewProperty
		Name="BackColor"
		Visible=true
		Group="Background"
		InitialValue="&hFFFFFF"
		Type="Color"
	#tag EndViewProperty
	#tag ViewProperty
		Name="Backdrop"
		Visible=true
		Group="Background"
		Type="Picture"
		EditorType="Picture"
	#tag EndViewProperty
	#tag ViewProperty
		Name="CanvasHmargin"
		Group="Behavior"
		Type="Integer"
	#tag EndViewProperty
	#tag ViewProperty
		Name="CanvasVMargin"
		Group="Behavior"
		Type="Integer"
	#tag EndViewProperty
	#tag ViewProperty
		Name="CloseButton"
		Visible=true
		Group="Frame"
		InitialValue="True"
		Type="Boolean"
		EditorType="Boolean"
	#tag EndViewProperty
	#tag ViewProperty
		Name="column"
		Group="Behavior"
		Type="Integer"
	#tag EndViewProperty
	#tag ViewProperty
		Name="Composite"
		Group="OS X (Carbon)"
		InitialValue="False"
		Type="Boolean"
	#tag EndViewProperty
	#tag ViewProperty
		Name="edit"
		Group="Behavior"
		InitialValue="false"
		Type="Boolean"
	#tag EndViewProperty
	#tag ViewProperty
		Name="Frame"
		Visible=true
		Group="Frame"
		InitialValue="0"
		Type="Integer"
		EditorType="Enum"
		#tag EnumValues
			"0 - Document"
			"1 - Movable Modal"
			"2 - Modal Dialog"
			"3 - Floating Window"
			"4 - Plain Box"
			"5 - Shadowed Box"
			"6 - Rounded Window"
			"7 - Global Floating Window"
			"8 - Sheet Window"
			"9 - Metal Window"
			"11 - Modeless Dialog"
		#tag EndEnumValues
	#tag EndViewProperty
	#tag ViewProperty
		Name="FullScreen"
		Group="Behavior"
		InitialValue="False"
		Type="Boolean"
		EditorType="Boolean"
	#tag EndViewProperty
	#tag ViewProperty
		Name="FullScreenButton"
		Visible=true
		Group="Frame"
		InitialValue="False"
		Type="Boolean"
		EditorType="Boolean"
	#tag EndViewProperty
	#tag ViewProperty
		Name="GorC"
		Group="Behavior"
		InitialValue="false"
		Type="Boolean"
	#tag EndViewProperty
	#tag ViewProperty
		Name="HasBackColor"
		Visible=true
		Group="Background"
		InitialValue="False"
		Type="Boolean"
	#tag EndViewProperty
	#tag ViewProperty
		Name="Height"
		Visible=true
		Group="Size"
		InitialValue="400"
		Type="Integer"
	#tag EndViewProperty
	#tag ViewProperty
		Name="icon"
		Group="Behavior"
		Type="Picture"
	#tag EndViewProperty
	#tag ViewProperty
		Name="ImplicitInstance"
		Visible=true
		Group="Behavior"
		InitialValue="True"
		Type="Boolean"
		EditorType="Boolean"
	#tag EndViewProperty
	#tag ViewProperty
		Name="Interfaces"
		Visible=true
		Group="ID"
		Type="String"
		EditorType="String"
	#tag EndViewProperty
	#tag ViewProperty
		Name="LiveResize"
		Group="Behavior"
		InitialValue="True"
		Type="Boolean"
		EditorType="Boolean"
	#tag EndViewProperty
	#tag ViewProperty
		Name="MacProcID"
		Group="OS X (Carbon)"
		InitialValue="0"
		Type="Integer"
	#tag EndViewProperty
	#tag ViewProperty
		Name="MaxHeight"
		Visible=true
		Group="Size"
		InitialValue="32000"
		Type="Integer"
	#tag EndViewProperty
	#tag ViewProperty
		Name="MaximizeButton"
		Visible=true
		Group="Frame"
		InitialValue="True"
		Type="Boolean"
		EditorType="Boolean"
	#tag EndViewProperty
	#tag ViewProperty
		Name="MaxWidth"
		Visible=true
		Group="Size"
		InitialValue="32000"
		Type="Integer"
	#tag EndViewProperty
	#tag ViewProperty
		Name="maxWinHeight"
		Group="Behavior"
		Type="Integer"
	#tag EndViewProperty
	#tag ViewProperty
		Name="maxWinWidth"
		Group="Behavior"
		Type="Integer"
	#tag EndViewProperty
	#tag ViewProperty
		Name="MenuBar"
		Visible=true
		Group="Menus"
		Type="MenuBar"
		EditorType="MenuBar"
	#tag EndViewProperty
	#tag ViewProperty
		Name="MenuBarVisible"
		Visible=true
		Group="Deprecated"
		InitialValue="True"
		Type="Boolean"
		EditorType="Boolean"
	#tag EndViewProperty
	#tag ViewProperty
		Name="MinHeight"
		Visible=true
		Group="Size"
		InitialValue="64"
		Type="Integer"
	#tag EndViewProperty
	#tag ViewProperty
		Name="MinimizeButton"
		Visible=true
		Group="Frame"
		InitialValue="True"
		Type="Boolean"
		EditorType="Boolean"
	#tag EndViewProperty
	#tag ViewProperty
		Name="MinWidth"
		Visible=true
		Group="Size"
		InitialValue="64"
		Type="Integer"
	#tag EndViewProperty
	#tag ViewProperty
		Name="mScale"
		Group="Behavior"
		InitialValue="75"
		Type="Double"
	#tag EndViewProperty
	#tag ViewProperty
		Name="myPic"
		Group="Behavior"
		Type="Picture"
	#tag EndViewProperty
	#tag ViewProperty
		Name="Name"
		Visible=true
		Group="ID"
		Type="String"
		EditorType="String"
	#tag EndViewProperty
	#tag ViewProperty
		Name="OutCanvas"
		Group="Behavior"
		Type="Picture"
	#tag EndViewProperty
	#tag ViewProperty
		Name="OutputIsOpen"
		Group="Behavior"
		InitialValue="false"
		Type="Boolean"
	#tag EndViewProperty
	#tag ViewProperty
		Name="PicIndex"
		Group="Behavior"
		InitialValue="0"
		Type="Integer"
	#tag EndViewProperty
	#tag ViewProperty
		Name="Placement"
		Visible=true
		Group="Behavior"
		InitialValue="0"
		Type="Integer"
		EditorType="Enum"
		#tag EnumValues
			"0 - Default"
			"1 - Parent Window"
			"2 - Main Screen"
			"3 - Parent Window Screen"
			"4 - Stagger"
		#tag EndEnumValues
	#tag EndViewProperty
	#tag ViewProperty
		Name="rebuild"
		Group="Behavior"
		InitialValue="true"
		Type="Boolean"
	#tag EndViewProperty
	#tag ViewProperty
		Name="Resizeable"
		Visible=true
		Group="Frame"
		InitialValue="True"
		Type="Boolean"
		EditorType="Boolean"
	#tag EndViewProperty
	#tag ViewProperty
		Name="row"
		Group="Behavior"
		Type="Integer"
	#tag EndViewProperty
	#tag ViewProperty
		Name="Super"
		Visible=true
		Group="ID"
		Type="String"
		EditorType="String"
	#tag EndViewProperty
	#tag ViewProperty
		Name="Title"
		Visible=true
		Group="Frame"
		InitialValue="Untitled"
		Type="String"
	#tag EndViewProperty
	#tag ViewProperty
		Name="TP"
		Group="Behavior"
		InitialValue="0"
		Type="Integer"
	#tag EndViewProperty
	#tag ViewProperty
		Name="Visible"
		Visible=true
		Group="Behavior"
		InitialValue="True"
		Type="Boolean"
		EditorType="Boolean"
	#tag EndViewProperty
	#tag ViewProperty
		Name="Width"
		Visible=true
		Group="Size"
		InitialValue="600"
		Type="Integer"
	#tag EndViewProperty
#tag EndViewBehavior
